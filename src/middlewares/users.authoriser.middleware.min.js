import authenticateToken from"../controllers/token.verifier.controller";import query from"../controllers/query.controller";import errorMessage from"../controllers/response.message.controller";export const authorizeAdmin=async(e,s,r)=>{try{const{token:t}=e.body,o=authenticateToken(t);if(!o.success)return s.status(500).send({message:errorMessage.is_error,success:!1});let a=o.token.id,n=await query("select role from users where id = ?",[a]);if(!n)return s.status(500).send({message:errorMessage.is_error,success:!1});if(0==n.length)return s.status(404).send({message:errorMessage._err_u_404,success:!1});if([n]=n,"Admin"!=n.role)return console.log("not admin"),s.status(401).send({message:errorMessage._err_forbidden,success:!1});r()}catch(e){console.log(e),s.status(500).send({message:errorMessage.is_error,success:!1})}};export const authorizePatient=async(e,s,r)=>{console.log("body for patientcheck check");try{const t=e.body.patient;if(!t)return s.status(403).send({message:errorMessage._err_p_404,success:!1});let o=await query("select role from patients where id = ?",[t]);if(!o)return s.status(500).send({message:errorMessage.is_error,success:!1});if(0==o.length)return console.log("not patient"),s.status(404).send({message:errorMessage._err_p_404,success:!1});r()}catch(e){console.log(e),s.status(500).send({message:errorMessage.is_error,success:!1})}};export const authorizePatientToken=async(e,s,r)=>{try{let{token:t}=e.body;const o=authenticateToken(t);if(!o.success)return s.status(500).send({message:errorMessage.is_error,success:!1});let a=o.token.id,n=await query("select role from patients where id = ?",[a]);if(!n)return s.status(500).send({message:errorMessage.is_error,success:!1});if(0==n.length)return console.log("not patient"),s.status(404).send({message:errorMessage._err_p_404,success:!1});r()}catch(e){console.log(e),s.status(500).send({message:errorMessage.is_error,success:!1})}};export const authorizeHc_provider=async(e,s,r)=>{try{const{token:t}=e.body,o=authenticateToken(t);if(!o.success)return s.status(500).send({message:errorMessage.is_error,success:!1});let a=o.token.id,n=await query("select role from users where id = ?",[a]);if(!n)return s.status(500).send({message:errorMessage.is_error,success:!1});if(0==n.length)return s.status(404).send({message:errorMessage._err_u_404,success:!1});if([n]=n,"hc_provider"!=n.role)return console.log("not hc_provider"),s.status(401).send({message:errorMessage._err_forbidden,success:!1});r()}catch(e){console.log(e),s.status(500).send({message:errorMessage.is_error,success:!1})}};export const authorizePharmacist=async(e,s,r)=>{try{const{token:t}=e.body,o=authenticateToken(t);if(!o.success)return s.status(500).send({message:errorMessage.is_error,success:!1});let a=o.token.id,n=await query("select role from users where id = ?",[a]);if(!n)return s.status(500).send({message:errorMessage.is_error,success:!1});if(0==n.length)return s.status(404).send({message:errorMessage._err_u_404,success:!1});if([n]=n,"pharmacist"!=n.role&&"hc_provider"!=n.role)return console.log("not pharmacist"),s.status(401).send({message:errorMessage._err_forbidden,success:!1});r()}catch(e){console.log(e),s.status(500).send({message:errorMessage.is_error,success:!1})}};export const authorizeLaboratory_scientist=async(e,s,r)=>{try{const{token:t}=e.body,o=authenticateToken(t);if(!o.success)return s.status(500).send({message:errorMessage.is_error,success:!1});let a=o.token.id,n=await query("select role from users where id = ?",[a]);if(!n)return s.status(500).send({message:errorMessage.is_error,success:!1});if(0==n.length)return s.status(404).send({message:errorMessage._err_u_404,success:!1});if([n]=n,"laboratory_scientist"!=n.role)return console.log("not laboratory Scientist"),s.status(401).send({message:errorMessage._err_forbidden,success:!1});r()}catch(e){console.log(e),s.status(500).send({message:errorMessage.is_error,success:!1})}};export const authorizeHcp_ptnt=async(e,s,r)=>{try{const{token:t}=e.body,o=authenticateToken(t);if(!o.success)return s.status(500).send({message:errorMessage.is_error,success:!1});let a=o.token.id,n=await query("SELECT COALESCE(users.role, patients.role) AS role\n      FROM users\n      LEFT JOIN patients ON users.id = patients.id\n      WHERE (users.id = ? AND users.status = 'active')\n      UNION\n      SELECT COALESCE(users.role, patients.role) AS role\n      FROM users\n      RIGHT JOIN patients ON users.id = patients.id\n      WHERE (patients.id = ? AND patients.status = 'active');\n      ",[a,a]);if(!n)return s.status(500).send({message:errorMessage.is_error,success:!1});if(0==n.length)return s.status(404).send({message:errorMessage._err_u_404,success:!1});if([n]=n,"hc_provider"!=n.role&&"patient"!=n.role&&"householder"!=n.role&&"pharmacist"!=n.role&&"Admin"!=n.role)return console.log("not admin pharmacist patient or hc_provider"),s.status(401).send({message:errorMessage._err_forbidden,success:!1});console.log(`you are ${n.role}`),r()}catch(e){console.log(e),s.status(500).send({message:errorMessage.is_error,success:!1})}};export const authorizeCashier=async(e,s,r)=>{try{const{token:t}=e.body,o=authenticateToken(t);if(!o.success)return s.status(500).send({message:errorMessage.is_error,success:!1});let a=o.token.id,n=await query("select role from users where id = ?",[a]);if(!n)return s.status(500).send({message:errorMessage.is_error,success:!1});if(0==n.length)return s.status(404).send({message:errorMessage._err_u_404,success:!1});if([n]=n,"cashier"!=n.role&&"Admin"!=n.role)return console.log("not cashier"),s.status(401).send({message:errorMessage._err_forbidden,success:!1});r()}catch(e){console.log(e),s.status(500).send({message:errorMessage.is_error,success:!1})}};export const authorizeAssuranceManager=async(e,s,r)=>{try{const{token:t}=e.body,o=authenticateToken(t);if(!o.success)return s.status(500).send({message:errorMessage.is_error,success:!1});let a=o.token.id,n=await query("select role from users where id = ?",[a]);if(!n)return s.status(500).send({message:errorMessage.is_error,success:!1});if(0==n.length)return s.status(404).send({message:errorMessage._err_u_404,success:!1});if([n]=n,"insurance_manager"!=n.role&&"Admin"!=n.role)return console.log("not assurance manager"),s.status(401).send({message:errorMessage._err_forbidden,success:!1});console.log("body for assurance manager check"),r()}catch(e){console.log(e),s.status(500).send({message:errorMessage.is_error,success:!1})}};export const authorizeMultipleRoles=async(e,s,r,t)=>{try{const{token:o}=e.body,a=authenticateToken(o);if(!a.success)return s.status(500).send({message:errorMessage.is_error,success:!1});let n=a.token.id,c=await query("select role from users where id = ?",[n]);if(!c)return s.status(500).send({message:errorMessage.is_error,success:!1});if(0==c.length)return s.status(404).send({message:errorMessage._err_u_404,success:!1});if([c]=c,!(t.indexOf(c.role)in t))return s.status(401).send({message:errorMessage._err_forbidden,success:!1});console.log("body for multiple users check check"),r()}catch(e){console.log(e),s.status(500).send({message:errorMessage.is_error,success:!1})}};