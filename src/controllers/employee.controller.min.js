import query from"./query.controller";import errorMessage from"./response.message.controller";import id from"./randomInt.generator.controller";import generate2FAcode from"./2FA.code.generator.controller";import sendmail from"./2FA.sender.controller";import{checkEmail,checkNID,checku_name,checkPhone,checkArrayAvai}from"./credentials.verifier.controller";import authenticateToken from"./token.verifier.controller";import{titles}from"../utils/titles.controller";import{roles}from"../utils/roles.controller";export const addemployee=async(e,s)=>{try{let r,{Full_name:t,email:a,phone:n,nid:o,hospital:i,department:u,title:c,license:l,extra:m}=e.body,d="123456",g=t.replace(/ /gi,".");g+=id().substring(2,4);for(const e of titles)if(c==Object.keys(e)[0]){let s=e[Object.keys(e)[0]];r=roles[s]}let p=id();if(a){let e=await checkEmail(a,"users");if(!e)return s.status(500).send({success:!1,message:errorMessage.is_error});if(e.length)return s.send({success:!1,message:errorMessage._err_email_avai})}else a=null;if(n){let e=await checkPhone(n,"users");if(!e)return s.status(500).send({success:!1,message:errorMessage.is_error});if(e.length)return s.send({success:!1,message:errorMessage._err_phone_avai})}else n=null;if(o){let e=await checkNID(o,"users");if(!e)return s.status(500).send({success:!1,message:errorMessage.is_error});if(e.length)return s.send({success:!1,message:errorMessage._err_NID_avai})}else o=null;let _=await checku_name(g,"users");if(!_)return s.status(500).send({success:!1,message:errorMessage.is_error});if(_.length)return s.send({success:!1,message:errorMessage._err_uname_avai});if(i){let e=await query("UPDATE hospitals SET employees = JSON_ARRAY_APPEND(employees, '$', ?) where hospitals.id = ?",[p,i]);if(!e)return s.status(500).send({success:!1,message:errorMessage.is_error});if(!e.affectedRows)return s.status(404).send({success:!1,message:errorMessage._err_hc_404})}let h=await query("insert into users(id,NID,email,phone,Full_name,username,password,role,department,status,title,license,extra,dateadded)values(?,?,?,?,?,?,?,?,?,?,?,?,?,CURRENT_TIMESTAMP())",[p,o,a,n,t,g,d,r,u,"unverified",c,l,JSON.stringify(m)]),y=generate2FAcode();if(!h)return s.status(500).send({success:!1,message:errorMessage.is_error});await query("update users set  FA = ? where id = ?",[y,p]);sendmail(a,{subject:"UDS your 2FA one time verification code",body:`${y}`},t,"2FA code");s.send({success:!0,message:errorMessage.uc_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const getHpEmployees=async(e,s)=>{let{token:r}=e.body,t=authenticateToken(r);t=t.token;var a=t.hospital;!a&&(a=e.body.hospital);try{let e=await query("\n          SELECT\n           users.id,\n           users.online,\n           users.Full_name,\n           users.phone,\n           users.email,\n           users.title,\n           GROUP_CONCAT(DISTINCT JSON_OBJECT('id', departments.id, 'name', departments.name)) AS department\n          FROM \n           users inner join hospitals on JSON_CONTAINS(hospitals.employees, JSON_QUOTE(users.id), '$')\n           left join departments on users.department = departments.id\n          WHERE \n           hospitals.id = ?\n           GROUP BY users.id\n      ",[a]);if(!e)return s.status(500).send({success:!1,message:errorMessage.is_error});for(const s of e)e[e.indexOf(s)].department=JSON.parse(s.department);s.send({success:!0,message:e})}catch(e){return console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const getEmployees=async(e,s)=>{try{let e=await query("\n          SELECT\n           users.id,\n           users.online,\n           users.Full_name as name,\n           users.phone,\n           users.email,\n           users.title as position,\n           users.nid,\n           users.status,\n           COALESCE(hospitals.name, 'N/A')  as hp,\n           COALESCE(departments.name, 'N/A')  as department\n          FROM \n           users left join hospitals on JSON_CONTAINS(hospitals.employees, JSON_QUOTE(users.id), '$')\n           left join departments on users.department = departments.id\n          where \n            users.role!= 'Admin'\n            AND \n            users.role!= 'system'\n      ",[]);if(!e)return s.status(500).send({success:!1,message:errorMessage.is_error});s.send({success:!0,message:e})}catch(e){return console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const getEmployeesByRole=async(e,s)=>{try{let{role:r}=e.params,t=await query("\n          SELECT\n           users.id,\n           users.online,\n           users.Full_name as name,\n           users.phone,\n           users.email,\n           users.title as position,\n           users.nid,\n           users.status\n          FROM \n           users\n          WHERE\n           users.role = ?\n          ",[r]);if(!t)return s.status(500).send({success:!1,message:errorMessage.is_error});s.send({success:!0,message:t})}catch(e){return console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const addEmployeetoHp=async(e,s)=>{try{let{employee:r,hospital:t}=e.body,a=await checkArrayAvai("hospitals","employees",r,"id",t);if(!a)return s.status(500).send({success:!1,message:errorMessage.is_error});if(a.length)return s.send({success:!1,message:errorMessage.err_entr_avai});let n=await query("UPDATE hospitals SET employees = JSON_ARRAY_APPEND(employees, '$', ?) where hospitals.id = ?",[r,t]);if(!n)return s.status(500).send({success:!1,message:errorMessage.is_error});if(!n.affectedRows)return s.status(404).send({success:!1,message:errorMessage._err_hc_404});s.send({success:!0,message:errorMessage.uc_added_to_hp_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const addEmployeetoAssurance=async(e,s)=>{try{let{manager:r,assurance:t}=e.body,a=await checkArrayAvai("assurances","managers",r,"id",t);if(!a)return s.status(500).send({success:!1,message:errorMessage.is_error});if(a.length)return s.send({success:!1,message:errorMessage.err_entr_avai});let n=await query("UPDATE assurances SET managers = JSON_ARRAY_APPEND(managers, '$', ?) where assurances.id = ?",[r,t]);if(!n)return s.status(500).send({success:!1,message:errorMessage.is_error});if(!n.affectedRows)return s.status(404).send({success:!1,message:errorMessage._err_hc_404});s.send({success:!0,message:errorMessage.uc_added_to_aSsU_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const removeEmployeFromHospital=async(e,s)=>{try{let{hospital:r,employee:t}=e.body,a=await checkArrayAvai("hospitals","employees",t,"id",r);if(!a)return s.status(500).send({success:!1,message:errorMessage.is_error});if(!a.length)return s.send({success:!1,message:errorMessage.err_entr_not_avai});let n=await query("UPDATE hospitals SET employees = JSON_REMOVE(employees,JSON_UNQUOTE(JSON_SEARCH(employees, 'one',?))) where hospitals.id = ?",[t,r]);if(!n)return s.status(500).send({success:!1,message:errorMessage.is_error});s.send({success:!0,message:errorMessage.entr_removed})}catch(e){s.status(500).send({success:!1,message:errorMessage.is_error}),console.log(e)}};export async function getHpEmployeesByDepartment(e,s){try{let r=await query("\n          SELECT\n           users.id,\n           users.Full_name\n          FROM\n           users inner join hospitals on JSON_CONTAINS(hospitals.employees, JSON_QUOTE(users.id), '$')\n          WHERE \n          hospitals.id = ? AND\n          users.department = ?\n           GROUP BY users.id\n      ",[e,s]);return r||null}catch(e){return console.log(e),null}}