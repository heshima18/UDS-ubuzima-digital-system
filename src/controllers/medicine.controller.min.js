import query from"./query.controller";import errorMessage from"./response.message.controller";import id from"./randomInt.generator.controller";export const addmedicine=async(e,s)=>{try{let{name:n,unit:r,price:i}=e.body,a=id(),t=await query("insert into medicines(id,name,price,unit)values(?,?,?,?)",[a,n,i,r]);if(!t)return s.status(500).send({success:!1,message:errorMessage.is_error});s.send({success:!0,message:errorMessage.mc_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const getMeds=async(e,s)=>{let n=await query("select * from medicines",[]);n?s.send({success:!0,message:n}):s.status(500).send({success:!1,message:errorMessage.is_error})};export const getMed=async(e,s)=>{let{medicine:n}=e.params,r=await query("select * from medicines where id = ?",[n]);if(r)return 0==r.length?s.status(404).send({success:!1,message:errorMessage._err_med_404}):void s.send({success:!0,message:r});s.status(500).send({success:!1,message:errorMessage.is_error})};export const searchMed=async(e,s)=>{let{medicine:n}=e.params,r=await query("SELECT\n  hospitals.name AS hospital,\n  CONCAT(\n    '[',\n    GROUP_CONCAT(\n      CONCAT(\n        '{\"id\": \"', m.id, '\", \"name\": \"', m.name, '\", \"quantity\": \"', JSON_UNQUOTE(JSON_EXTRACT(i.medicines, CONCAT('$[', indexes.idx, '].quantity'))), '\"}'\n      )\n      ORDER BY m.id\n      SEPARATOR ','\n    ),\n    ']'\n  ) AS medicines\nFROM inventories AS i\nINNER JOIN hospitals ON i.hospital = hospitals.id\nCROSS JOIN (\n  SELECT 0 AS idx\n  UNION ALL\n  SELECT idx + 1\n  FROM (\n    SELECT 0 AS idx\n    UNION ALL\n    SELECT 1\n    UNION ALL\n    SELECT 2\n    -- Add more UNION ALL statements for the maximum number of medicines in the inventories array\n  ) AS indexes\n) AS indexes\nINNER JOIN medicines AS m ON JSON_EXTRACT(i.medicines, CONCAT('$[', indexes.idx, '].id')) = m.id\nWHERE m.name LIKE ?\nGROUP BY i.hospital;\n\n",[`%${n}%`]);if(r){for(const e of r)r[r.indexOf(e)].medicines=JSON.parse(e.medicines);s.send({success:!0,message:r})}else s.status(500).send({success:!1,message:errorMessage.is_error})};