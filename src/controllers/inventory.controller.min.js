async function getInventoryEntry(e,s){try{let r=await query(`SELECT\n    i.id,\n    i.${s} as raw_${s},\n    COALESCE(\n      CONCAT('[',\n        GROUP_CONCAT(\n          DISTINCT  CASE WHEN m.id IS NOT NULL THEN JSON_OBJECT('id', m.id, 'name', m.name, 'price', m.price) ELSE NULL END SEPARATOR ',' \n        ),\n      ']'),\n    '[]') AS ${s}\n    FROM inventories AS i\n    LEFT JOIN ${s} AS m ON JSON_CONTAINS(i.${s}, JSON_OBJECT('id', m.id), '$')\n    WHERE i.id = ?\n    GROUP BY i.id;`,[e]);r=r[0],r[s]=JSON.parse(r[s]),r[`raw_${s}`]=JSON.parse(r[`raw_${s}`]);for(const e of r[s])Object.assign(r[s][r[s].indexOf(e)],{quantity:r[`raw_${s}`][r[s].indexOf(e)].quantity}),Object.assign(r[s][r[s].indexOf(e)],{price:r[`raw_${s}`][r[s].indexOf(e)].price});return delete r[`raw_${s}`],r[s]}catch(e){return void console.log(e)}}import query from"./query.controller";import errorMessage from"./response.message.controller";import authenticateToken from"./token.verifier.controller";import{checkInventory}from"../utils/check.inventory.controller";import id from"./randomInt.generator.controller";import{checkArrayAvai,checkObjectAvai}from"./credentials.verifier.controller";export const addInventory=async(e,s)=>{try{let{medicines:t,token:n}=e.body;n=authenticateToken(n),n=n.token;let a=n.hospital,o=id(),c=JSON.stringify(t);var r,i=await checkInventory(a);let d;if(i=i[0],0==i.total)r=await query("insert into inventories(id,hospital,medicines)values(?,?,?)",[o,a,c]);else for(const e of t){let i=await checkObjectAvai("inventories","medicines","id",e.id,"hospital",a);if(!i)return s.status(500).send({success:!1,message:errorMessage.is_error});i.length?d=1:r=await query('UPDATE inventories SET medicines = JSON_ARRAY_APPEND(medicines, \'$\', JSON_OBJECT("id", ?, "quantity", ?)) WHERE hospital = ?',[e.id,e.quantity,a])}if(!r&&!d)return s.status(500).send({success:!1,message:errorMessage.is_error});if(d)return s.send({success:!1,message:errorMessage.err_entr_avai});s.send({success:!0,message:errorMessage.iu_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const addInventoryTests=async(e,s)=>{try{let{tests:i,token:t}=e.body;t=authenticateToken(t),t=t.token;let n=t.hospital;var r;let a;for(const e of i){let i=await checkObjectAvai("inventories","tests","id",e.id,"hospital",n);if(!i)return s.status(500).send({success:!1,message:errorMessage.is_error});i.length?a=1:r=await query('UPDATE inventories SET tests = JSON_ARRAY_APPEND(tests, \'$\', JSON_OBJECT("id", ?, "price", ?)) WHERE hospital = ?',[e.id,e.price,n])}if(!r&&!a)return s.status(500).send({success:!1,message:errorMessage.is_error});if(a)return s.send({success:!1,message:errorMessage.err_entr_avai});s.send({success:!0,message:errorMessage.iu_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const addInventoryOperations=async(e,s)=>{try{let{operations:i,token:t}=e.body;t=authenticateToken(t),t=t.token;let n=t.hospital;var r;let a;for(const e of i){let i=await checkObjectAvai("inventories","operations","id",e.id,"hospital",n);if(!i)return s.status(500).send({success:!1,message:errorMessage.is_error});i.length?a=1:r=await query('UPDATE inventories SET operations = JSON_ARRAY_APPEND(operations, \'$\', JSON_OBJECT("id", ?, "price", ?)) WHERE hospital = ?',[e.id,e.price,n])}if(!r&&!a)return s.status(500).send({success:!1,message:errorMessage.is_error});if(a)return s.send({success:!1,message:errorMessage.err_entr_avai});s.send({success:!0,message:errorMessage.iu_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const addInventoryEquipments=async(e,s)=>{try{let{equipments:i,token:t}=e.body;t=authenticateToken(t),t=t.token;let n=t.hospital;var r;let a;for(const e of i){let i=await checkObjectAvai("inventories","equipments","id",e.id,"hospital",n);if(!i)return s.status(500).send({success:!1,message:errorMessage.is_error});i.length?a=1:r=await query('UPDATE inventories SET equipments = JSON_ARRAY_APPEND(equipments, \'$\', JSON_OBJECT("id", ?, "quantity", ?)) WHERE hospital = ?',[e.id,e.quantity,n])}if(!r&&!a)return s.status(500).send({success:!1,message:errorMessage.is_error});if(a)return s.send({success:!1,message:errorMessage.err_entr_avai});s.send({success:!0,message:errorMessage.iu_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const addInventoryServices=async(e,s)=>{try{let{services:i,token:t}=e.body;t=authenticateToken(t),t=t.token;let n=t.hospital;var r;let a;for(const e of i){let i=await checkObjectAvai("inventories","services","id",e.id,"hospital",n);if(!i)return s.status(500).send({success:!1,message:errorMessage.is_error});i.length?a=1:r=await query('UPDATE inventories SET services = JSON_ARRAY_APPEND(services, \'$\', JSON_OBJECT("id", ?, "price", ?)) WHERE hospital = ?',[e.id,e.price,n])}if(!r&&!a)return s.status(500).send({success:!1,message:errorMessage.is_error});if(a)return s.send({success:!1,message:errorMessage.err_entr_avai});s.send({success:!0,message:errorMessage.iu_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const getInventory=async(e,s)=>{try{let{token:i}=e.body;i=authenticateToken(i),i=i.token;let t=i.hospital;if(!t)return s.status(403).send({message:errorMessage._err_forbidden,success:!1});var r=await query("\n      SELECT\n      i.id,\n      i.medicines as raw_medicines,\n      i.tests as raw_tests,\n      i.operations as raw_operations,\n      i.equipments as raw_equipments,\n      i.services as raw_services,\n      COALESCE(\n        CONCAT('[',\n          GROUP_CONCAT(\n            DISTINCT  CASE WHEN m.id IS NOT NULL THEN JSON_OBJECT('id', m.id, 'name', m.name,'unit', m.unit, 'price', (SELECT price FROM medicines where id = m.id))  ELSE NULL END SEPARATOR ',' \n          ),\n        ']'),\n      '[]') AS medicines,\n      COALESCE(\n        CONCAT('[',\n          GROUP_CONCAT(\n            DISTINCT  CASE WHEN t.id IS NOT NULL THEN JSON_OBJECT('id', t.id, 'name', t.name)  ELSE NULL END SEPARATOR ',' \n          ),\n        ']'),\n      '[]') AS tests,\n      COALESCE(\n        CONCAT('[',\n          GROUP_CONCAT(\n            DISTINCT  CASE WHEN o.id IS NOT NULL THEN JSON_OBJECT('id', o.id, 'name', o.name)  ELSE NULL END SEPARATOR ',' \n          ),\n        ']'),\n      '[]') AS operations,\n      COALESCE(\n        CONCAT('[',\n          GROUP_CONCAT(\n            DISTINCT  CASE WHEN s.id IS NOT NULL THEN JSON_OBJECT('id', s.id, 'name', s.name, 'unit', s.unit)  ELSE NULL END SEPARATOR ',' \n          ),\n        ']'),\n      '[]') AS services,\n      COALESCE(\n        CONCAT('[',\n          GROUP_CONCAT(\n            DISTINCT  CASE WHEN eq.id IS NOT NULL THEN JSON_OBJECT('id', eq.id, 'name', eq.name,'unit', eq.unit)  ELSE NULL END SEPARATOR ',' \n          ),\n        ']'),\n      '[]') AS equipments\n      FROM inventories AS i\n      LEFT JOIN medicines AS m ON JSON_CONTAINS(i.medicines, JSON_OBJECT('id', m.id), '$')\n      LEFT JOIN equipments as eq ON JSON_CONTAINS(i.equipments, JSON_OBJECT('id', eq.id), '$')\n      LEFT JOIN services as s ON JSON_CONTAINS(i.services, JSON_OBJECT('id', s.id), '$')\n      LEFT JOIN operations as o ON JSON_CONTAINS(i.operations, JSON_OBJECT('id', o.id), '$')\n      LEFT JOIN tests AS t ON JSON_CONTAINS(i.tests, JSON_OBJECT('id', t.id), '$')\n      WHERE i.hospital = ?\n      GROUP BY i.hospital;",[t,t]);if(!r)return s.status(500).send({success:!1,message:errorMessage.is_error});if(0==r.length)return s.send({success:!0,message:r});r=r[0],r.medicines=JSON.parse(r.medicines),r.tests=JSON.parse(r.tests),r.operations=JSON.parse(r.operations),r.equipments=JSON.parse(r.equipments),r.services=JSON.parse(r.services),r.raw_medicines=JSON.parse(r.raw_medicines),r.raw_tests=JSON.parse(r.raw_tests),r.raw_operations=JSON.parse(r.raw_operations),r.raw_equipments=JSON.parse(r.raw_equipments),r.raw_services=JSON.parse(r.raw_services);for(const e of r.medicines)Object.assign(r.medicines[r.medicines.indexOf(e)],{quantity:r.raw_medicines[r.medicines.indexOf(e)].quantity});for(const e of r.tests)Object.assign(r.tests[r.tests.indexOf(e)],{price:r.raw_tests[r.tests.indexOf(e)].price});for(const e of r.operations)Object.assign(r.operations[r.operations.indexOf(e)],{price:r.raw_operations[r.operations.indexOf(e)].price});for(const e of r.services)Object.assign(r.services[r.services.indexOf(e)],{price:r.raw_services[r.services.indexOf(e)].price});for(const e of r.equipments)Object.assign(r.equipments[r.equipments.indexOf(e)],{quantity:r.raw_equipments[r.equipments.indexOf(e)].quantity});delete r.raw_medicines,delete r.raw_operations,delete r.raw_tests,delete r.raw_equipments,delete r.raw_services,s.send({success:!0,message:r})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const removeItemFromInventory=async(e,s)=>{try{let{type:r,inventory:i,needle:t}=e.body,n=await checkObjectAvai("inventories",r,"id",t,"id",i);if(!n)return s.status(500).send({success:!1,message:errorMessage.is_error});if(!n.length)return s.send({success:!1,message:errorMessage.err_entr_not_avai});let a=await query(`UPDATE inventories SET ${r} = JSON_REMOVE(${r},JSON_UNQUOTE(JSON_SEARCH(${r}, 'one',?))) where inventories.id = ?`,[t,i]);if(!a)return s.status(500).send({success:!1,message:errorMessage.is_error});s.send({success:!0,message:errorMessage.entr_removed})}catch(e){s.status(500).send({success:!1,message:errorMessage.is_error}),console.log(e)}};export const editItemFromInventory=async(e,s)=>{try{let{type:r,inventory:i,needle:t,upinfo:n}=e.body,a=await checkObjectAvai("inventories",r,"id",t,"id",i);if(!a)return s.status(500).send({success:!1,message:errorMessage.is_error});if(!a.length)return s.send({success:!1,message:errorMessage.err_entr_not_avai});let o,c=await getInventoryEntry(i,r);if("medicines"==r)c=c.map(function(e){return e.id==t?{id:e.id,quantity:Number(n.quantity)}:{id:e.id,quantity:Number(e.quantity)}});else if("tests"==r)c=c.map(function(e){return e.id==t?{id:e.id,price:Number(n.price)}:{id:e.id,price:Number(e.price)}});else if("operations"==r)c=c.map(function(e){return e.id==t?{id:e.id,price:Number(n.price)}:{id:e.id,price:Number(e.price)}});else if("services"==r)c=c.map(function(e){return e.id==t?{id:e.id,price:Number(n.price)}:{id:e.id,price:Number(e.price)}});else{if("equipments"!=r)return s.status(500).send({success:!1,message:errorMessage.is_error});c=c.map(function(e){return e.id==t?{id:e.id,quantity:Number(n.quantity)}:{id:e.id,quantity:Number(e.quantity)}})}if(o=await query(`\n        UPDATE inventories \n        SET ${r} = ?\n        WHERE inventories.id = ?\n    `,[JSON.stringify(c),i]),!o)return s.status(500).send({success:!1,message:errorMessage.is_error});s.send({success:!0,message:errorMessage.entr_updated})}catch(e){s.status(500).send({success:!1,message:errorMessage.is_error}),console.log(e)}};