import query from"./query.controller";import errorMessage from"./response.message.controller";import id from"./randomInt.generator.controller";import{checkArrayAvai}from"./credentials.verifier.controller";import authenticateToken from"./token.verifier.controller";export const addAssurance=async(s,e)=>{try{let{name:r,percentage:a}=s.body,t=await query("insert into assurances(id,name,percentage_coverage,\n            rstctd_medicines,\t\n            rstctd_tests,\n            rstctd_operations,\t\n            rstctd_equipments,\t\n            rstctd_services,\t\n            managers,\n            dateadded\t\n            )values(?,?,?,?,?,?,?,?,?,CURRENT_TIMESTAMP())",[id(),r,a,"[]","[]","[]","[]","[]","[]"]);if(!t)return void e.status(500).send({success:!1,message:errorMessage.is_error});e.send({success:!0,message:errorMessage.assu_added_message})}catch(s){e.status(500).send({success:!1,message:errorMessage.is_error}),console.log(s)}};export const getAssurances=async(s,e)=>{try{let s=await query("SELECT\n         assurances.id,\n         assurances.name,\n         COALESCE(CONCAT('[', GROUP_CONCAT(DISTINCT  CASE WHEN users.id IS NOT NULL THEN JSON_OBJECT('id', users.id, 'name', users.Full_name) ELSE NULL END), ']'), '[]') AS managers\n        FROM\n         assurances\n         LEFT JOIN users ON JSON_CONTAINS(assurances.managers, JSON_QUOTE(users.id), '$')\n        group by assurances.id\n         ");if(!s)return void e.status(500).send({success:!1,message:errorMessage.is_error});s=s.map(function(s){return s.managers=JSON.parse(s.managers),s}),e.send({success:!0,message:s})}catch(s){e.status(500).send({success:!1,message:errorMessage.is_error}),console.log(s)}};export const assurance=async(s,e)=>{try{let{assurance:r}=s.params;if(!r){let{token:e}=s.body;e=authenticateToken(e),e=e.token,r=e.assurance}if(!r)return e.status(404).send({success:!1,message:errorMessage._err_assu_404});let a=await query("SELECT\n         assurances.id,\n         assurances.name,\n         COALESCE(CONCAT('[', GROUP_CONCAT(DISTINCT  CASE WHEN users.id IS NOT NULL THEN JSON_OBJECT('id', users.id, 'name', users.Full_name, 'title', users.title) ELSE NULL END), ']'), '[]') AS managers,\n         COALESCE(CONCAT('[', GROUP_CONCAT(DISTINCT  CASE WHEN medicines.id IS NOT NULL THEN JSON_OBJECT('id', medicines.id, 'name', medicines.name, 'price', medicines.price) ELSE NULL END), ']'), '[]') AS rstrct_m,\n         COALESCE(CONCAT('[', GROUP_CONCAT(DISTINCT  CASE WHEN tests.id IS NOT NULL THEN JSON_OBJECT('id', tests.id, 'name', tests.name, 'price', tests.price) ELSE NULL END), ']'), '[]') AS rstrct_t,\n         COALESCE(CONCAT('[', GROUP_CONCAT(DISTINCT  CASE WHEN operations.id IS NOT NULL THEN JSON_OBJECT('id', operations.id, 'name', operations.name, 'price', operations.price) ELSE NULL END), ']'), '[]') AS rstrct_o,\n         COALESCE(CONCAT('[', GROUP_CONCAT(DISTINCT  CASE WHEN services.id IS NOT NULL THEN JSON_OBJECT('id', services.id, 'name', services.name, 'price', services.price) ELSE NULL END), ']'), '[]') AS rstrct_s,\n         COALESCE(CONCAT('[', GROUP_CONCAT(DISTINCT  CASE WHEN equipments.id IS NOT NULL THEN JSON_OBJECT('id', equipments.id, 'name', equipments.name, 'price', equipments.price) ELSE NULL END), ']'), '[]') AS rstrct_e\n        FROM\n         assurances\n         LEFT JOIN users ON JSON_CONTAINS(assurances.managers, JSON_QUOTE(users.id), '$')\n         LEFT JOIN medicines ON JSON_CONTAINS(assurances.rstctd_medicines, JSON_QUOTE(medicines.id), '$')\n         LEFT JOIN tests ON JSON_CONTAINS(assurances.rstctd_tests, JSON_QUOTE(tests.id), '$')\n         LEFT JOIN operations ON JSON_CONTAINS(assurances.rstctd_operations, JSON_QUOTE(operations.id), '$')\n         LEFT JOIN equipments ON JSON_CONTAINS(assurances.rstctd_equipments, JSON_QUOTE(equipments.id), '$')\n         LEFT JOIN services ON JSON_CONTAINS(assurances.rstctd_services, JSON_QUOTE(services.id), '$')\n\n        WHERE \n         assurances.id = ?\n        group by assurances.id\n         ",[r]);if(!a)return e.status(500).send({success:!1,message:errorMessage.is_error});if(0==r.length)return e.status(404).send({success:!1,message:a});a=a.map(function(s){return s.managers=JSON.parse(s.managers),s.rstrct_m=JSON.parse(s.rstrct_m),s.rstrct_s=JSON.parse(s.rstrct_s),s.rstrct_o=JSON.parse(s.rstrct_o),s.rstrct_t=JSON.parse(s.rstrct_t),s.rstrct_e=JSON.parse(s.rstrct_e),s}),e.send({success:!0,message:a[0]})}catch(s){e.status(500).send({success:!1,message:errorMessage.is_error}),console.log(s)}};export const addMedicineToAssuranceRestrictedList=async(s,e)=>{try{let{medicines:r,assurance:a}=s.body;for(const s of r){let r=await checkArrayAvai("assurances","rstctd_medicines",s.id,"id",a);if(!r)return e.status(500).send({success:!1,message:errorMessage.is_error});if(r.length)return e.send({success:!1,message:errorMessage.err_entr_avai});let t=await query("UPDATE assurances SET rstctd_medicines = JSON_ARRAY_APPEND(rstctd_medicines, '$', ?) where assurances.id = ?",[s.id,a]);if(!t)return e.status(500).send({success:!1,message:errorMessage.is_error});if(!t.affectedRows)return e.status(404).send({success:!1,message:errorMessage._err_assu_404})}e.send({success:!0,message:errorMessage.mc_added_to_aSsU_message})}catch(s){e.status(500).send({success:!1,message:errorMessage.is_error}),console.log(s)}};export const addTestToAssuranceRestrictedList=async(s,e)=>{try{let{tests:r,assurance:a}=s.body;for(const s of r){let r=await checkArrayAvai("assurances","rstctd_tests",s.id,"id",a);if(!r)return e.status(500).send({success:!1,message:errorMessage.is_error});if(r.length)return e.send({success:!1,message:errorMessage.err_entr_avai});let t=await query("UPDATE assurances SET rstctd_tests = JSON_ARRAY_APPEND(rstctd_tests, '$', ?) where assurances.id = ?",[s.id,a]);if(!t)return e.status(500).send({success:!1,message:errorMessage.is_error});if(!t.affectedRows)return e.status(404).send({success:!1,message:errorMessage._err_assu_404})}e.send({success:!0,message:errorMessage.tc_added_to_aSsU_message})}catch(s){e.status(500).send({success:!1,message:errorMessage.is_error}),console.log(s)}};export const addEquipmentToAssuranceRestrictedList=async(s,e)=>{try{let{equipments:r,assurance:a}=s.body;for(const s of r){let r=await checkArrayAvai("assurances","rstctd_equipments",s.id,"id",a);if(!r)return e.status(500).send({success:!1,message:errorMessage.is_error});if(r.length)return e.send({success:!1,message:errorMessage.err_entr_avai});let t=await query("UPDATE assurances SET rstctd_equipments = JSON_ARRAY_APPEND(rstctd_equipments, '$', ?) where assurances.id = ?",[s.id,a]);if(!t)return e.status(500).send({success:!1,message:errorMessage.is_error});if(!t.affectedRows)return e.status(404).send({success:!1,message:errorMessage._err_assu_404})}e.send({success:!0,message:errorMessage.ec_added_to_aSsU_message})}catch(s){e.status(500).send({success:!1,message:errorMessage.is_error}),console.log(s)}};export const addServiceToAssuranceRestrictedList=async(s,e)=>{try{let{services:r,assurance:a}=s.body;for(const s of r){let r=await checkArrayAvai("assurances","rstctd_services",s.id,"id",a);if(!r)return e.status(500).send({success:!1,message:errorMessage.is_error});if(r.length)return e.send({success:!1,message:errorMessage.err_entr_avai});let t=await query("UPDATE assurances SET rstctd_services = JSON_ARRAY_APPEND(rstctd_services, '$', ?) where assurances.id = ?",[s.id,a]);if(!t)return e.status(500).send({success:!1,message:errorMessage.is_error});if(!t.affectedRows)return e.status(404).send({success:!1,message:errorMessage._err_assu_404})}e.send({success:!0,message:errorMessage.sc_added_to_aSsU_message})}catch(s){e.status(500).send({success:!1,message:errorMessage.is_error}),console.log(s)}};export const addOperationToAssuranceRestrictedList=async(s,e)=>{try{let{operations:r,assurance:a}=s.body;for(const s of r){let r=await checkArrayAvai("assurances","rstctd_operations",s.id,"id",a);if(!r)return e.status(500).send({success:!1,message:errorMessage.is_error});if(r.length)return e.send({success:!1,message:errorMessage.err_entr_avai});let t=await query("UPDATE assurances SET rstctd_operations = JSON_ARRAY_APPEND(rstctd_operations, '$', ?) where assurances.id = ?",[s.id,a]);if(!t)return e.status(500).send({success:!1,message:errorMessage.is_error});if(!t.affectedRows)return e.status(404).send({success:!1,message:errorMessage._err_assu_404})}e.send({success:!0,message:errorMessage.oc_added_to_aSsU_message})}catch(s){e.status(500).send({success:!1,message:errorMessage.is_error}),console.log(s)}};export const removeItemFromAssurancelist=async(s,e)=>{try{let{type:r,assurance:a,needle:t}=s.body,n=await checkArrayAvai("assurances",r,t,"id",a);if(!n)return e.status(500).send({success:!1,message:errorMessage.is_error});if(!n.length)return e.send({success:!1,message:errorMessage.err_entr_not_avai});let c=await query(`UPDATE assurances SET ${r} = JSON_REMOVE(${r},JSON_UNQUOTE(JSON_SEARCH(${r}, 'one',?))) where assurances.id = ?`,[t,a]);if(!c)return e.status(500).send({success:!1,message:errorMessage.is_error});e.send({success:!0,message:errorMessage.entr_removed})}catch(s){e.status(500).send({success:!1,message:errorMessage.is_error}),console.log(s)}};export const assuranceHP=async(s,e)=>{try{let{token:r}=s.body;r=authenticateToken(r),r=r.token;let a=r.assurance,t=await query("SELECT\n                                    distinct hp.id,\n                                    hp.name\n                                  FROM\n                                    medical_history as mh\n                                    INNER JOIN \n                                      hospitals as hp on mh.hospital = hp.id\n                                  WHERE\n                                    mh.assurance = ?\n                                  GROUP BY \n                                    hp.id\n      ",[a]);if(!t)return e.status(500).send({success:!0,message:errorMessage.is_error});e.send({success:!0,message:t})}catch(s){return console.log(s),e.status(500).send({success:!0,message:errorMessage.is_error})}};