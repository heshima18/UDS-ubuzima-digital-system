import query from"./query.controller";import errorMessage from"./response.message.controller";import id from"./randomInt.generator.controller";import authenticateToken from"./token.verifier.controller";export const addAppointment=async(e,s)=>{try{let{patient:t,subject:n,message:a,time:r,token:o,dateadded:i,status:p,extra:d}=e.body;if(!r)return s.status(500).send({success:!1,message:errorMessage.is_error});o=authenticateToken(o);let c=o.token.id;d=d?JSON.stringify(d):null;let m=await query("insert\n         into appointments\n         (\n            id,\n            patient,\n            hc_provider,\n            subject,\n            message,\n            time,\n            dateadded,\n            status,\n            extra\n         )\n         values\n         (?,?,?,?,?,?,?,?,?)",[id(),t,c,n,a,r,i,p,d]);if(!m)return void s.status(500).send({success:!1,message:errorMessage.is_error});s.send({success:!0,message:"declined"==p?errorMessage.appoi_decli_message:errorMessage.ab_message})}catch(e){s.status(500).send({success:!1,message:errorMessage.is_error}),console.log(e)}};export const myAppointments=async(e,s)=>{try{let{token:t}=e.body;t=authenticateToken(t),t=t.token.id;let n=await query("SELECT\n            distinct appointments.id,\n            appointments.subject, \n            hospitals.name as hospital,\n            appointments.time,\n            appointments.status,\n            appointments.dateadded as date_booked\n          FROM\n            appointments\n                Inner join users ON users.id = appointments.hc_provider\n                inner join hospitals on JSON_CONTAINS(hospitals.employees, JSON_QUOTE(users.id), '$')\n          WHERE appointments.patient = ?\n          GROUP BY\n           appointments.id\n          ORDER BY\n           appointments.dateadded desc ",[t]);if(!n)return void s.status(500).send({success:!1,message:errorMessage.is_error});s.send({success:!0,message:n})}catch(e){s.status(500).send({success:!1,message:errorMessage.is_error}),console.log(e)}};export const hcpAppointments=async(e,s)=>{try{let{token:t}=e.body;t=authenticateToken(t),t=t.token.id;let n=await query("Select\n          distinct appointments.id,\n          patients.Full_name as patient,\n          hospitals.name as hospital,\n          appointments.subject,\n          appointments.message,\n          appointments.time,\n          appointments.status,\n          appointments.dateadded as date_booked\n        from\n         appointments\n            Inner join users ON users.id = appointments.hc_provider\n            Inner join patients ON patients.id = appointments.patient\n            inner join hospitals on JSON_CONTAINS(hospitals.employees, JSON_QUOTE(users.id), '$')\n        where appointments.hc_provider = ?\n        group by appointments.id order by appointments.dateadded desc",[t]);if(!n)return void s.status(500).send({success:!1,message:errorMessage.is_error});s.send({success:!0,message:n})}catch(e){s.status(500).send({success:!1,message:errorMessage.is_error}),console.log(e)}};export const appointment=async(e,s)=>{try{let{id:t}=e.params,n=await query("SELECT\n        distinct appointments.id,\n        users.Full_name AS hc_provider,\n        patients.Full_name AS patient,\n        appointments.subject,\n        hospitals.name AS hospital,\n        appointments.message,\n        appointments.time,\n        appointments.extra,\n        appointments.dateadded AS date_booked,\n        appointments.status\n        FROM\n        appointments\n        INNER JOIN users ON appointments.hc_provider = users.id\n        INNER JOIN patients ON appointments.patient = patients.id\n        INNER JOIN hospitals ON JSON_CONTAINS(hospitals.employees, JSON_QUOTE(users.id), '$')\n        WHERE\n        appointments.id = ? GROUP BY appointments.id",[t]);if(!n)return void s.status(500).send({success:!1,message:errorMessage.is_error});if(!n.length)return s.status(404).send({success:!1,message:errorMessage.err_appoi_404_message});n=n[0],n.extra&&(n.extra=JSON.parse(n.extra)),s.send({success:!0,message:n})}catch(e){s.status(500).send({success:!1,message:errorMessage.is_error}),console.log(e)}};export const approveAppointment=async(e,s)=>{try{let{token:t,appointment:n}=e.body;t=authenticateToken(t),t=t.token.id;let a=await query("update appointments set status = ? where id = ? && hc_provider = ? AND status != ? AND status != ?",["approved",n,t,"declined","outdated"]);if(!a)return void s.status(500).send({success:!1,message:errorMessage.is_error});if(0==a.affectedRows)return void s.status(401).send({success:!1,message:errorMessage._err_forbidden});s.send({success:!0,message:errorMessage.appoi_appr_message})}catch(e){s.status(500).send({success:!1,message:errorMessage.is_error}),console.log(e)}};export const declineAppointment=async(e,s)=>{try{let{token:t,appointment:n}=e.body;t=authenticateToken(t),t=t.token.id;let a=await query("update appointments set status = ? where id = ? && hc_provider = ? AND status != ?",["declined",n,t,"approved"]);if(!a)return void s.status(500).send({success:!1,message:errorMessage.is_error});if(0==a.affectedRows)return void s.status(401).send({success:!1,message:errorMessage._err_forbidden});s.send({success:!0,message:errorMessage.appoi_decli_message})}catch(e){s.status(500).send({success:!1,message:errorMessage.is_error}),console.log(e)}};