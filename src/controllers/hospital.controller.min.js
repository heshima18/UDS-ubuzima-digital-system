import query from"./query.controller";import errorMessage from"./response.message.controller";import id from"./randomInt.generator.controller";import authenticateToken from"./token.verifier.controller";export const addhospital=async(s,e)=>{try{let{name:t,departments:n,province:r,type:i,district:a,sector:o,cell:c,dependency:l,phone:d}=s.body,p=id(),O=await query("insert into hospitals(id,name,departments,province,type,phone,district,sector,cell,dependency,employees)values(?,?,?,?,?,?,?,?,?,?,?)",[p,t,JSON.stringify(n),r,i,d,a,o,c,l,"[]"]);if(!O)return void e.status(500).send({success:!1,message:errorMessage.is_error});e.send({success:!0,message:"health service center created sucessfully"}),await query("insert into inventories(id,hospital,medicines,tests,equipments,operations,services)values(?,?,?,?,?,?,?)",[id(),p,"[]","[]","[]","[]","[]"])}catch(s){e.status(500).send({success:!1,message:errorMessage.is_error}),console.log(s)}};export const getHPs=async(s,e)=>{try{let s=await query("SELECT\n      hospitals.name AS name,\n      hospitals.id AS id,\n      hospitals.type,\n      GROUP_CONCAT(DISTINCT JSON_OBJECT('province', provinces.name, 'district', districts.name, 'sector', sectors.name,'cell', cells.name)) as location,\n      COALESCE(CONCAT('[', GROUP_CONCAT(DISTINCT JSON_OBJECT('id', users.id, 'name', users.Full_name)), ']'), '[]') AS employees,\n      CONCAT('[', GROUP_CONCAT(DISTINCT JSON_OBJECT('id', departments.id, 'name', departments.name)), ']') AS departments,\n      COUNT(DISTINCT medical_history.id) AS total_patients\n    FROM\n      hospitals\n      LEFT JOIN users ON JSON_CONTAINS(hospitals.employees, JSON_QUOTE(users.id), '$')\n      INNER JOIN departments ON JSON_CONTAINS(hospitals.departments, JSON_QUOTE(departments.id), '$')\n      LEFT JOIN medical_history ON medical_history.hospital = hospitals.id\n      LEFT JOIN provinces ON hospitals.province = provinces.id\n      LEFT JOIN districts ON hospitals.district = districts.id\n      LEFT JOIN sectors ON hospitals.sector = sectors.id\n      LEFT JOIN cells ON hospitals.cell = cells.id\n    GROUP BY\n      hospitals.id,\n      hospitals.name;\n     \n            \n    ");if(!s)return e.status(500).send({success:!1,message:errorMessage.is_error});for(const e of s)s[s.indexOf(e)].employees=JSON.parse(e.employees),s[s.indexOf(e)].location=JSON.parse(e.location),s[s.indexOf(e)].departments=JSON.parse(e.departments);if(0==s.length)return e.status(404).send({success:!0,message:errorMessage._err_hc_404});e.send({success:!0,message:s})}catch(s){console.log(s),e.status(500).send({success:!1,message:errorMessage.is_error})}};export const getHP=async(s,e)=>{try{let{hospital:t}=s.params;if(!t){let{token:e}=s.body;e=authenticateToken(e),e=e.token,t=e.hospital}if(!t)return e.status(404).send({success:!1,message:errorMessage._err_hc_404});let n=await query("SELECT\n      hospitals.name AS name,\n      hospitals.id AS id,\n      hospitals.type,\n      GROUP_CONCAT(DISTINCT JSON_OBJECT('province', provinces.name, 'district', districts.name, 'sector', sectors.name,'cell', cells.name)) as location,\n      COALESCE(CONCAT('[', GROUP_CONCAT(DISTINCT JSON_OBJECT('id', users.id, 'name', users.Full_name, 'title', users.title,'phone', users.phone)), ']'), '[]') AS employees,\n      CONCAT('[', GROUP_CONCAT(DISTINCT JSON_OBJECT('id', departments.id, 'name', departments.name)), ']') AS departments,\n      COUNT(DISTINCT medical_history.id) AS total_patients\n    FROM\n      hospitals\n      LEFT JOIN users ON JSON_CONTAINS(hospitals.employees, JSON_QUOTE(users.id), '$')\n      INNER JOIN departments ON JSON_CONTAINS(hospitals.departments, JSON_QUOTE(departments.id), '$')\n      LEFT JOIN medical_history ON medical_history.hospital = hospitals.id\n      LEFT JOIN provinces ON hospitals.province = provinces.id\n      LEFT JOIN districts ON hospitals.district = districts.id\n      LEFT JOIN sectors ON hospitals.sector = sectors.id\n      LEFT JOIN cells ON hospitals.cell = cells.id\n      where hospitals.id = ?\n    GROUP BY\n      hospitals.id,\n      hospitals.name;\n          \n    ",[t]);if(!n)return e.status(500).send({success:!1,message:errorMessage.is_error});for(const s of n)n[n.indexOf(s)].employees=JSON.parse(s.employees),n[n.indexOf(s)].location=JSON.parse(s.location),n[n.indexOf(s)].departments=JSON.parse(s.departments);if(0==n.length)return e.status(404).send({success:!1,message:errorMessage._err_hc_404});e.send({success:!0,message:n[0]})}catch(s){console.log(s),e.status(500).send({success:!1,message:errorMessage.is_error})}};export const searchHP=async(s,e)=>{try{let{hospital:t}=s.params,n=await query("SELECT\n      hospitals.name AS name,\n      hospitals.id AS id,\n      hospitals.type,\n      GROUP_CONCAT(DISTINCT JSON_OBJECT('province', provinces.name, 'district', districts.name, 'sector', sectors.name,'cell', cells.name)) as location,\n      COALESCE(CONCAT('[', GROUP_CONCAT(DISTINCT JSON_OBJECT('id', users.id, 'name', users.Full_name, 'position', users.role)), ']'), '[]') AS employees,\n      CONCAT('[', GROUP_CONCAT(DISTINCT JSON_OBJECT('id', departments.id, 'name', departments.name)), ']') AS departments,\n      COUNT(DISTINCT medical_history.id) AS total_patients\n    FROM\n      hospitals\n      LEFT JOIN users ON JSON_CONTAINS(hospitals.employees, JSON_QUOTE(users.id), '$')\n      INNER JOIN departments ON JSON_CONTAINS(hospitals.departments, JSON_QUOTE(departments.id), '$')\n      LEFT JOIN medical_history ON medical_history.hospital = hospitals.id\n      LEFT JOIN provinces ON hospitals.province = provinces.id\n      LEFT JOIN districts ON hospitals.district = districts.id\n      LEFT JOIN sectors ON hospitals.sector = sectors.id\n      LEFT JOIN cells ON hospitals.cell = cells.id\n      where hospitals.name like ?\n    GROUP BY\n      hospitals.id,\n      hospitals.name;\n          \n    ",[`%${t}%`]);if(!n)return e.status(500).send({success:!1,message:errorMessage.is_error});for(const s of n)n[n.indexOf(s)].employees=JSON.parse(s.employees),n[n.indexOf(s)].location=JSON.parse(s.location),n[n.indexOf(s)].departments=JSON.parse(s.departments);if(0==n.length)return e.status(404).send({success:!1,message:errorMessage._err_hc_404});e.send({success:!0,message:n})}catch(s){console.log(s),e.status(500).send({success:!1,message:errorMessage.is_error})}};export async function getCustomHps(s){try{console.log(s);let e="";for(const t of s)s.indexOf(t)==s.length-1?e+=`id = '${t}'`:e+=`id = '${t}' OR `;let t=await query(`SELECT\n      hospitals.name AS name,\n      hospitals.id AS id,\n      CONCAT(\n        (SELECT name From provinces Where id = hospitals.province),' , ',\n        (SELECT name From districts Where id = hospitals.district),' , ',\n        (SELECT name From sectors Where id = hospitals.sector),' , ',\n        (SELECT name From cells Where id = hospitals.cell)\n      )as location\n    FROM\n      hospitals\n    WHERE ${e}\n    GROUP BY\n      hospitals.id,\n      hospitals.name;\n          \n    `,[]);return t}catch(s){return console.log(s),[]}}export const hospitalASSU=async(s,e)=>{try{let{token:t}=s.body;t=authenticateToken(t),t=t.token;let n=t.hospital,r=await query("SELECT\n                                  distinct assu.id,\n                                  assu.name\n                                FROM\n                                  medical_history as mh\n                                  INNER JOIN \n                                    assurances as assu on mh.assurance = assu.id\n                                WHERE\n                                  mh.hospital = ?\n                                GROUP BY \n                                  assu.id\n    ",[n]);if(!r)return e.status(500).send({success:!0,message:errorMessage.is_error});e.send({success:!0,message:r})}catch(s){return console.log(s),e.status(500).send({success:!0,message:errorMessage.is_error})}};