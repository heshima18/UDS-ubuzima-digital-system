import{MatchTemplate,connectFP}from"./fingerprint.controller";import query from"./query.controller";import errorMessage from"./response.message.controller";import authenticateToken from"./token.verifier.controller";import EventEmitter from"events";class MyEventEmitter extends EventEmitter{}const event=new MyEventEmitter;export const getPatients=async(e,s)=>{try{let e=await query("\n                SELECT id,Full_name,phone,email,nid,status\n                FROM patients\n            ");if(!e)return s.status(500).send({success:!1,message:errorMessage.is_error});s.send({success:!0,message:e})}catch(e){return console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const getPatient=async(e,s)=>{try{var{patient:t}=e.params;let{fp_data:r,type:n}=e.body;if(!t&&"fp"==n){let e=await selectPatientFP();if(!e)return s.status(500).send({success:!1,message:errorMessage.is_error});let n=await new Promise(async(s,t)=>{let n=null;for(const a of e){let i;try{i=await connectFP("",e=>{e.type&&"comparison"==e.type&&e.success?event.emit("responseReceived",a):e.type&&"comparison"==e.type&&!e.success&&event.emit("responseReceived",null),"connection"!=e.type||e.success||t(0)})}catch(e){console.log(e),i=!1}if(i?MatchTemplate(r,a.data):t(0),n=await new Promise(e=>{event.once("responseReceived",s=>{e(s)})}),n)return s(n);e.indexOf(a)+1!=e.length||n||s(n)}});if(!n)return s.status(404).send({success:!1,message:errorMessage._err_u_404});t=n.user}let a=await query("\n            SELECT\n                patients.id,\n                COALESCE( CONCAT('[', GROUP_CONCAT(DISTINCT CASE WHEN assurances.id IS NOT NULL THEN JSON_OBJECT('id', assurances.id, 'name', assurances.name) ELSE NULL END ), ']'), '[]') AS assurances,\n                COALESCE( CONCAT('[', GROUP_CONCAT(DISTINCT CASE WHEN p2.id IS NOT NULL THEN JSON_OBJECT('id', p2.id, 'name', p2.Full_name) ELSE NULL END SEPARATOR ','), ']'), '[]') AS beneficiaries,\n                COALESCE( GROUP_CONCAT(\n                    DISTINCT CASE WHEN p3.id IS NOT NULL THEN JSON_OBJECT('id', p3.id, 'name', p3.Full_name) ELSE NULL END\n                    ), null) AS householder,\n                patients.Full_name,\n                patients.assurances as raw_assurances,\n                patients.phone,\n                patients.email,\n                patients.gender,\n                patients.nid,\n                patients.dob,\n                patients.role,\n                provinces.name as province,\n                districts.name as district,\n                sectors.name as sector,\n                cells.name as cell,\n                patients.status\n            FROM patients\n                LEFT JOIN patients as p2 on p2.householder = patients.id\n                LEFT JOIN patients as p3 on p3.id = patients.householder\n                LEFT JOIN assurances on JSON_CONTAINS(patients.assurances, JSON_OBJECT('id',assurances.id), '$')\n                INNER JOIN provinces on patients.resident_province = provinces.id\n                INNER JOIN districts on patients.resident_district = districts.id\n                INNER JOIN sectors on patients.resident_sector = sectors.id\n                INNER JOIN cells on patients.resident_cell = cells.id\n            where\n                patients.nid = ? \n                OR patients.phone = ? \n                OR patients.email = ? \n                OR patients.id = ? \n                OR patients.username = ?\n                OR JSON_CONTAINS(patients.assurances, JSON_OBJECT('number',?), '$')\n            group by patients.id\n        ",[t,t,t,t,t,t]);if(!a)return s.status(500).send({success:!1,message:errorMessage.is_error});if(0==a.length)return s.status(404).send({success:!1,message:errorMessage._err_u_404});a=a[0],a.assurances=JSON.parse(a.assurances),a.householder&&(a.householder=JSON.parse(a.householder)),a.beneficiaries=JSON.parse(a.beneficiaries),a.raw_assurances=JSON.parse(a.raw_assurances);for(const e of a.assurances)for(const s of a.raw_assurances)s.id==e.id&&Object.assign(a.assurances[a.assurances.indexOf(e)],{eligibility:s.status,number:s.number});delete a.raw_assurances,s.send({success:!0,message:a})}catch(e){return console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const addUserAssurance=async(e,s)=>{try{let{assurances:r,token:n}=e.body,a=authenticateToken(n),i=a.token.id;if(0==r.length)return s.status(404).send({success:!1,message:errorMessage._err_assu_404});for(const e of r){var t=await query("select name from assurances where id = ?",[e]);if(!t)return s.status(500).send({success:!1,message:errorMessage.is_error});if(0==t.length)return s.status(404).send({success:!1,message:errorMessage._err_assu_404});{let t=await query('update patients set assurances =  JSON_ARRAY_APPEND(assurances, \'$\', JSON_OBJECT("id", ? ,"status", ?, "number", ?)) where id = ?',[e.id,"eligible",e.number,i]);if(!t)return s.status(500).send({success:!1,message:errorMessage.is_error});if(0==t.affectedRows)return s.status(500).send({success:!1,message:errorMessage.is_error})}}s.send({success:!0,message:errorMessage.assu_added_to_user_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export async function selectPatient(e){try{let s=await query("select id, Full_name, email, phone, FA from patients where id = ?",[e]);return s?(s=s[0],s):null}catch(e){return console.log(e),null}}export async function selectPatientFP(e){try{let s;return e?(s=await query("select data, user from fingerprints where user = ?",[e]),s?(s=s[0],s):null):(s=await query("select data, user from fingerprints",[]),s||null)}catch(e){return console.log(e),null}}