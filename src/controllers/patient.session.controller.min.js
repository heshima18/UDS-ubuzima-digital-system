import query from"./query.controller";import errorMessage from"./response.message.controller";import id from"./randomInt.generator.controller";import authenticateToken from"./token.verifier.controller";import{calculatePayments}from"../utils/calculate.payments.controller";import{selectPatient}from"./patients.controller";import{ioSendMessage,ioSendMessages}from"./message.controller";import{io}from"../socket.io/connector.socket.io";import{checkObjectAvai,getPayment,getSession}from"./credentials.verifier.controller";import{DateTime}from"luxon";import{getHpEmployeesByDepartment}from"./employee.controller";export const addSession=async(e,s)=>{try{const a=DateTime.now();let r=a.setZone("Africa/Kigali");r=r.toFormat("yyyy-MM-dd HH:mm:ss");let i,{patient:o,symptoms:d,tests:c,decision:m,departments:u,medicines:p,comment:O,token:_,assurance:l,close:N,equipments:h,services:g,operations:S,weight:f}=e.body,y=id();c=c||[],h=h||[],g=g||[],S=S||[],u=u||[],m=m||[];let T=authenticateToken(_);p=p||[];let E=T.token.id;u.push(T.token.department);let J,C,A,w,I,q=T.token.hospital;J=0,C=0,w=0,A=0,I=0;for(const e of c){var t=await query("select price from tests where id = ?",[e.id]);if(Object.assign(c[c.indexOf(e)],{tester:E}),0==t.length)return s.status(500).send({success:!1,message:errorMessage._err_test_404});t=t[0],Object.assign(c[c.indexOf(e)],{price:t.price}),J+=t.price}let v=await query("select medicines from inventories where hospital = ?",[q]);v.length?([v]=v,v=JSON.parse(v.medicines)):v=[];for(const e of p){var n=await query("select price from medicines where id = ?",[e.id]);for(const t of v)if(t.id==e.id)if(Number(t.quantity)<Number(e.quantity))Object.assign(p[p.indexOf(e)],{servedOut:!0,status:null,price:n.price*e.quantity});else{if(0==n.length)return s.status(500).send({success:!1,message:errorMessage._err_med_404});n=n[0],C+=n.price*parseInt(e.quantity),Object.assign(p[p.indexOf(e)],{servedOut:!1,price:n.price*parseInt(e.quantity)}),"served"==e.status&&(v[v.indexOf(t)].quantity=parseInt(v[v.indexOf(t)].quantity)-parseInt(e.quantity))}"servedOut"in p[p.indexOf(e)]||Object.assign(p[p.indexOf(e)],{servedOut:!0,price:0}),e.servedOut||"served"==e.status||(i=!0)}for(const e of h){n=await query("select price from equipments where id = ?",[e.id]);if(0==n.length)return s.status(404).send({success:!1,message:errorMessage._err_equipment_404});n=n[0],Object.assign(h[h.indexOf(e)],{price:n.price*parseInt(e.quantity)}),A+=n.price*parseInt(e.quantity)}for(const e of g){n=await query("select price from services where id = ?",[e.id]);if(0==n.length)return s.status(404).send({success:!1,message:errorMessage._err_service_404});n=n[0],Object.assign(g[g.indexOf(e)],{price:n.price*parseInt(e.quantity)}),I+=n.price*parseInt(e.quantity)}for(const e of S){n=await query("select price from operations where id = ?",[e.id]);if(0==n.length)return s.status(404).send({success:!1,message:errorMessage._err_operation_404});n=n[0],Object.assign(S[S.indexOf(e)],{operator:E,price:parseInt(n.price)}),w+=n.price}let M={medicines:p,tests:c,operations:S,services:g,equipments:h};query("UPDATE inventories  SET medicines = ? where hospital = ?",[JSON.stringify(v),q]);let R=await calculatePayments(l,M,"all");if(!R)return console.log("error in payments calculations"),s.status(500).send({success:!1,message:errorMessage.is_error});let x=await query("insert into payments(id,user,session,amount,assurance_amount,status,date,assurance)values(?,?,?,?,?,?,CURRENT_TIMESTAMP(),?)",[id(),o,y,R.patient_amount,R.assurance_amount,"awaiting payment",l]),L=await query("insert into\n       medical_history(id,patient,hospital,departments,hc_provider,symptoms,tests,medicines,decision,comment,status,assurance,services,operations,equipments,p_weight,dateadded)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",[y,o,q,JSON.stringify(u),E,JSON.stringify(d),JSON.stringify(c),JSON.stringify(p),JSON.stringify(m),O,N?"closed":"open",l,JSON.stringify(g),JSON.stringify(S),JSON.stringify(h),f,r]);if(query("update patients set last_diagnosed = CURRENT_TIMESTAMP() where id = ?",[y,o]),!L||!x)return s.status(500).send({success:!1,message:errorMessage.is_error});s.send({success:!0,message:errorMessage.session_message,id:y});let P,F,k,D,b=await selectPatient(o),B={session:y,patient:b.id,patient_name:b.Full_name};P=`${b.Full_name}'s session created successfully`,F="session created successfully !",k={name:"system",id:"196371492058"},D="session_message";let U={type:D,content:P,title:F,sender:k,receiver:E,extra:B},$=await ioSendMessage(U);if($){const e=Array.from(io.sockets.sockets.values()).find(e=>e.handshake.query.id===E);Object.assign(U,{id:$}),e?e.emit("message",U):console.log("recepient is not online")}if(i){let e=await getHpEmployeesByDepartment(T.token.hospital,"1790485192");if(!e)return;b=await selectPatient(o),e=e.map(function(e){return e.id});try{let s,t,n,a,r={session:y,patient:b.id,patient_name:b.Full_name};s=`incoming medications request for ${b.Full_name}`,t="medication request",n={name:"system",id:"196371492058"},a="session_message";let i={type:a,content:s,title:t,sender:n,receivers:e,extra:r};await ioSendMessages(i)}catch(e){console.log(e)}}}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const getUsessions=async(e,s)=>{try{let{userid:t}=e.params,{token:n}=e.body;if(!t||null==t){if(t=authenticateToken(n),!t.success)return s.status(500).send({success:!1,message:errorMessage.is_error});t=t.token.id}let a=await query("SELECT \n      mh.id AS session_id,\n      mh.dateadded,\n      mh.status,\n      mh.dateclosed,\n      GROUP_CONCAT(\n        DISTINCT\n          JSON_OBJECT('id', mh.hospital,'phone', hospitals.phone, 'name', hospitals.name, 'location', \n            CONCAT(\n              (SELECT name From provinces Where id = hospitals.province),' , ',\n              (SELECT name From districts Where id = hospitals.district),' , ',\n              (SELECT name From sectors Where id = hospitals.sector),' , ',\n              (SELECT name From cells Where id = hospitals.cell)\n            )\n        )\n      ) AS hp_info,\n      GROUP_CONCAT(\n        DISTINCT\n          JSON_OBJECT('id', pm.id, 'status', pm.status, 'a_amount', pm.assurance_amount, 'p_amount', pm.amount, 'datepaid', pm.datepaid, 'date', pm.date)\n        ) AS payment_info\n    FROM\n      medical_history mh\n      INNER JOIN payments ON mh.id = payments.session\n      INNER JOIN hospitals ON mh.hospital = hospitals.id\n      INNER JOIN payments as pm ON mh.id = pm.session\n    WHERE mh.patient = ?\n    GROUP BY mh.id\n    ORDER BY mh.dateclosed DESC;\n    ",[t]);if(!a)return s.status(500).send({success:!1,message:errorMessage.is_error});for(const e of a)a[a.indexOf(e)].hp_info=JSON.parse(e.hp_info),a[a.indexOf(e)].payment_info=JSON.parse(a[a.indexOf(e)].payment_info),e.dateclosed||(a[a.indexOf(e)].payment_info="N/A");s.send({success:!0,message:a})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const getHc_pSessions=async(e,s)=>{try{let{token:t}=e.body,n=authenticateToken(t),a=n.token.id;a||(a=e.body.hcp);let r=await query("SELECT \n      mh.id AS session_id,\n      mh.tests as raw_tests,\n      mh.comment as comment,\n      mh.status as status,\n      mh.medicines as raw_medicines,\n      payments.amount as payment_amount,\n      patients.Full_name as patient_name,\n      patients.id as patient_id,\n      payments.status as payment_status,\n      mh.decision as decision,\n      CONCAT('[', GROUP_CONCAT(DISTINCT CONCAT('{\"name\": \"', m.name, '\"}')), ']') AS medicines,\n      COALESCE( CONCAT('[', GROUP_CONCAT(DISTINCT CONCAT('{\"name\": \"', t.name, '\"}')), ']'), '[]') AS tests\n    FROM\n      medical_history mh\n      INNER JOIN payments ON mh.id = payments.session\n      INNER JOIN patients ON mh.patient = patients.id\n      INNER JOIN medicines AS m ON JSON_CONTAINS(mh.medicines, JSON_OBJECT('id', m.id), '$')\n      LEFT JOIN tests AS t ON JSON_CONTAINS(mh.tests, JSON_OBJECT('id', t.id), '$')\n    WHERE mh.hcp_provider = ?\n    GROUP BY\n    mh.id;\n    ",[a]);if(!r)return s.status(500).send({success:!1,message:errorMessage.is_error});for(const e of r){r[r.indexOf(e)].medicines=JSON.parse(e.medicines),r[r.indexOf(e)].decision=JSON.parse(e.decision),r[r.indexOf(e)].tests=JSON.parse(e.tests),r[r.indexOf(e)].raw_tests=JSON.parse(e.raw_tests),r[r.indexOf(e)].raw_medicines=JSON.parse(e.raw_medicines);for(const s of e.medicines)Object.assign(r[r.indexOf(e)].medicines[e.medicines.indexOf(s)],{quantity:r[r.indexOf(e)].raw_medicines[e.medicines.indexOf(s)].quantity,servedOut:r[r.indexOf(e)].raw_medicines[e.medicines.indexOf(s)].servedOut});for(const s of e.tests)try{Object.assign(r[r.indexOf(e)].tests[e.tests.indexOf(s)],{result:r[r.indexOf(e)].raw_tests[e.tests.indexOf(s)].result,tester:r[r.indexOf(e)].raw_tests[e.tests.indexOf(s)].tester})}catch(e){}delete r[r.indexOf(e)].raw_tests,delete r[r.indexOf(e)].raw_medicines}s.send({success:!0,message:r})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const session=async(e,s)=>{try{let{session:t}=e.params,{token:n}=e.body;n=authenticateToken(n),n=n.token;const a=n.role;let r=await query("SELECT \n    p.full_name AS patient_name,\n    mh.id AS session_id,\n    mh.tests as raw_tests,\n    mh.equipments as raw_equipments,\n    mh.services as raw_services,\n    mh.operations as raw_operations,\n    mh.comment as comment,\n    mh.symptoms as symptoms,\n    mh.status as status,\n    mh.medicines as raw_medicines,\n    mh.decision as decisions,\n    mh.dateadded as dateadded,\n    mh.dateclosed as dateclosed,\n    GROUP_CONCAT(\n      DISTINCT \n      JSON_OBJECT('id', p.id, 'name', p.Full_name, 'weight', mh.p_weight, 'dob', p.dob,'phone', p.phone,'nid', p.nid, 'location', \n        CONCAT(\n          (SELECT name From provinces Where id = p.resident_province),' , ',\n          (SELECT name From districts Where id = p.resident_district),' , ',\n          (SELECT name From sectors Where id = p.resident_sector),' , ',\n          (SELECT name From cells Where id = p.resident_cell)\n        )\n      )\n    ) AS p_info,\n    GROUP_CONCAT(DISTINCT JSON_OBJECT('id', users.id, 'name', users.Full_name, 'title', users.title, 'license', users.license,'phone', users.phone)) AS hcp_info,\n    GROUP_CONCAT(\n      DISTINCT\n        JSON_OBJECT('id', mh.hospital,'phone', hospitals.phone, 'name', hospitals.name, 'location', \n          CONCAT(\n            (SELECT name From provinces Where id = hospitals.province),' , ',\n            (SELECT name From districts Where id = hospitals.district),' , ',\n            (SELECT name From sectors Where id = hospitals.sector),' , ',\n            (SELECT name From cells Where id = hospitals.cell)\n          )\n      )\n    ) AS hp_info,\n    GROUP_CONCAT(DISTINCT JSON_OBJECT('id', a.id, 'name', a.name,'percentage', a.percentage_coverage)) AS assurance_info,\n    GROUP_CONCAT(\n      DISTINCT\n        JSON_OBJECT('id', pm.id, 'status', pm.status, 'a_amount', pm.assurance_amount, 'p_amount', pm.amount, 'datepaid', pm.datepaid, 'date', pm.date)\n      ) AS payment_info,\n    COALESCE(\n      CONCAT('[',\n        GROUP_CONCAT(\n          DISTINCT  CASE WHEN m.id IS NOT NULL THEN JSON_OBJECT('id', m.id, 'name', m.name,'unit', m.unit, 'price', (SELECT price FROM medicines where id = m.id))  ELSE NULL END SEPARATOR ',' \n        ),\n      ']'),\n    '[]') AS medicines,\n    COALESCE(\n      CONCAT('[',\n        GROUP_CONCAT(\n        DISTINCT CASE WHEN eq.id IS NOT NULL THEN JSON_OBJECT('id', eq.id, 'name', eq.name,'unit', eq.unit, 'price', (SELECT price FROM equipments where id = eq.id))  ELSE NULL END SEPARATOR ','\n        ),\n      ']'), \n    '[]') AS equipments,\n    COALESCE(\n      CONCAT('[',\n        GROUP_CONCAT(DISTINCT  CASE WHEN s.id IS NOT NULL THEN JSON_OBJECT('id', s.id, 'name', s.name,'unit', s.unit, 'price', (SELECT price FROM services where id = s.id))  ELSE NULL END SEPARATOR ',' \n        ),\n      ']'),\n    '[]') AS services,\n    COALESCE(\n      CONCAT('[',\n        GROUP_CONCAT(DISTINCT  CASE WHEN t.id IS NOT NULL THEN JSON_OBJECT('id', t.id, 'name', t.name, 'price', (SELECT price FROM tests where id = t.id), 'tester', tester.Full_name)  ELSE NULL END SEPARATOR ',' \n        ),\n      ']'),\n    '[]') AS tests,\n    COALESCE(\n      CONCAT('[',\n        GROUP_CONCAT(\n          DISTINCT  CASE WHEN o.id IS NOT NULL THEN JSON_OBJECT('id', o.id, 'name', o.name, 'price', (SELECT price FROM operations where id = o.id),'operator', operator.Full_name)  ELSE NULL END SEPARATOR ',' \n        ),\n      ']'),\n    '[]') AS operations,\n    COALESCE( CONCAT('[', GROUP_CONCAT(DISTINCT  CASE WHEN d.id IS NOT NULL THEN  JSON_OBJECT('id', d.id, 'name', d.name)  ELSE NULL END SEPARATOR ',' ), ']'), '[]') AS departments\n\nFROM\n    medical_history mh\n    INNER JOIN patients p ON mh.patient = p.id\n    INNER JOIN users ON mh.Hc_provider = users.id\n    LEFT JOIN users as tester ON JSON_CONTAINS(mh.tests, JSON_OBJECT('tester', tester.id), '$')\n    LEFT JOIN users as operator ON JSON_CONTAINS(mh.operations, JSON_OBJECT('operator', operator.id), '$')\n    INNER JOIN hospitals ON mh.hospital = hospitals.id\n    INNER JOIN payments as pm ON mh.id = pm.session\n    LEFT JOIN medicines AS m ON JSON_CONTAINS(mh.medicines, JSON_OBJECT('id', m.id), '$')\n    LEFT JOIN equipments as eq ON JSON_CONTAINS(mh.equipments, JSON_OBJECT('id', eq.id), '$')\n    LEFT JOIN services as s ON JSON_CONTAINS(mh.services, JSON_OBJECT('id', s.id), '$')\n    LEFT JOIN operations as o ON JSON_CONTAINS(mh.operations, JSON_OBJECT('id', o.id), '$')\n    LEFT JOIN tests AS t ON JSON_CONTAINS(mh.tests, JSON_OBJECT('id', t.id), '$')\n    LEFT JOIN departments as d ON JSON_CONTAINS(mh.departments, JSON_QUOTE(d.id), '$')\n    left join assurances as a on mh.assurance = a.id\nWHERE mh.id = ?\nGROUP BY mh.id;\n\n  ",[t]);if(!r)return s.status(500).send({success:!1,message:errorMessage.is_error});if(0==r.length)return s.status(404).send({success:!1,message:errorMessage._err_sess_404});r=r[0],r.medicines=JSON.parse(r.medicines),r.hp_info=JSON.parse(r.hp_info),r.hcp_info=JSON.parse(r.hcp_info),r.assurance_info=JSON.parse(r.assurance_info),r.departments=JSON.parse(r.departments),r.decisions=JSON.parse(r.decisions),r.symptoms=JSON.parse(r.symptoms),r.tests=JSON.parse(r.tests),r.services=JSON.parse(r.services),r.equipments=JSON.parse(r.equipments),r.operations=JSON.parse(r.operations),r.p_info=JSON.parse(r.p_info),r.payment_info=JSON.parse(r.payment_info),r.raw_tests=JSON.parse(r.raw_tests),r.raw_services=JSON.parse(r.raw_services),r.raw_operations=JSON.parse(r.raw_operations),r.raw_equipments=JSON.parse(r.raw_equipments),r.raw_medicines=JSON.parse(r.raw_medicines),r.dateadded=new Intl.DateTimeFormat("en-US",{weekday:"long",year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit"}).format(new Date(r.dateadded)),r.dateclosed?r.dateclosed=new Intl.DateTimeFormat("en-US",{weekday:"long",year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit"}).format(new Date(r.dateclosed)):r.dateclosed="N/A","hc_provider"!=a&&"patient"!=a&&"householder"!=a&&(delete r.decisions,delete r.symptoms);for(const e of r.medicines)Object.assign(r.medicines[r.medicines.indexOf(e)],{quantity:r.raw_medicines[r.medicines.indexOf(e)].quantity,servedOut:r.raw_medicines[r.medicines.indexOf(e)].servedOut,status:r.raw_medicines[r.medicines.indexOf(e)].status}),"hc_provider"!=a&&"patient"!=a&&"householder"!=a?r.raw_medicines[r.medicines.indexOf(e)].servedOut&&r.medicines.splice(r.medicines.indexOf(e),1):"cashier"!=a&&"patient"!=a&&"householder"!=a&&delete r.medicines[r.medicines.indexOf(e)].price;for(const e of r.services)"cashier"!=a&&"patient"!=a&&"householder"!=a&&delete r.services[r.services.indexOf(e)].price,Object.assign(r.services[r.services.indexOf(e)],{quantity:r.raw_services[r.services.indexOf(e)].quantity});for(const e of r.equipments)"cashier"!=a&&"patient"!=a&&"householder"!=a&&delete r.equipments[r.equipments.indexOf(e)].price,Object.assign(r.equipments[r.equipments.indexOf(e)],{quantity:r.raw_equipments[r.equipments.indexOf(e)].quantity});for(const e of r.tests)"hc_provider"!=a&&"patient"!=a&&"householder"!=a||Object.assign(r.tests[r.tests.indexOf(e)],{result:r.raw_tests[r.tests.indexOf(e)].result,sample:r.raw_tests[r.tests.indexOf(e)].sample});delete r.raw_tests,delete r.raw_operations,delete r.raw_services,delete r.raw_equipments,delete r.raw_medicines,"hc_provider"!=a&&"cashier"!=a&&"patient"!=a&&"householder"!=a?(delete r.services,delete r.tests,delete r.operations,delete r.equipments,delete r.services,delete r.decisions):"cashier"!=a&&"patient"!=a&&"householder"!=a&&delete r.assurance_info,s.send({success:!0,message:r})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const addSessionTests=async(e,s)=>{try{let{session:n,test:a,token:r}=e.body,i=authenticateToken(r),o=await query("select assurance from medical_history where id = ?",[n]);if(!o)return s.status(500).send({success:!1,message:errorMessage.is_error});o=o[0],o=o.assurance;let d=i.token,c=0;var t=await query("select price from tests where id = ?",[a.id]);if(!t)return s.status(500).send({success:!1,message:errorMessage.is_error});if(0==t.length)t={price:0};else{[t]=t,Object.assign(a,{price:t.price}),c+=t.price;let e=await checkObjectAvai("medical_history","tests","id",a.id,"id",n);if(!e)return s.status(500).send({success:!1,message:errorMessage.is_error});if(e.length)return s.send({success:!1,message:errorMessage.err_entr_avai});query('update medical_history set tests =  JSON_ARRAY_APPEND(tests, \'$\', JSON_OBJECT("id", ?,"sample", ?, "result", ?, "tester", ?)) where id = ?',[a.id,a.sample,a.result,d.id,n])}if(0==c)return s.status(403).send({success:!1,message:errorMessage._err_test_404});let m=await calculatePayments(o,{tests:[a]},"tests");if(!m)return console.log("error in payments calculations"),s.status(500).send({success:!1,message:errorMessage.is_error});let u=await getPayment(n);if(!u)return s.status(500).send({success:!1,message:errorMessage.is_error});u=u[0],u.assurance_amount+=m.assurance_amount,u.amount+=m.patient_amount;let p=await query("update payments set amount = ?,assurance_amount = ? where session = ?",[u.amount,u.assurance_amount,n]);if(query("update medical_history set departments =  JSON_ARRAY_APPEND(departments, '$', ?) where id = ?",[d.department,n]),!p)return s.status(500).send({success:!1,message:errorMessage.is_error});s.send({success:!0,message:errorMessage.test_added_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const addSessionOperation=async(e,s)=>{try{let{session:n,operation:a,token:r}=e.body,i=authenticateToken(r),o=await query("select assurance from medical_history where id = ?",[n]);if(!o)return s.status(500).send({success:!1,message:errorMessage.is_error});o=o[0],o=o.assurance;let d=i.token,c=0;var t=await query("select price from operations where id = ?",[a.id]);if(!t)return s.status(500).send({success:!1,message:errorMessage.is_error});if(0==t.length)t={price:0};else{[t]=t,Object.assign(a,{price:parseInt(t.price)}),c+=t.price;let e=await checkObjectAvai("medical_history","operations","id",a.id,"id",n);if(!e)return s.status(500).send({success:!1,message:errorMessage.is_error});if(e.length)return s.send({success:!1,message:errorMessage.err_entr_avai});query('update medical_history set operations =  JSON_ARRAY_APPEND(operations, \'$\', JSON_OBJECT("id", ?, "operator", ?)) where id = ?',[a.id,d.id,n])}if(0==c)return s.status(403).send({success:!1,message:errorMessage._err_operation_404});let m=await calculatePayments(o,{operations:[a]},"operations"),u=await getPayment(n);if(!u)return s.status(500).send({success:!1,message:errorMessage.is_error});u=u[0],u.assurance_amount+=m.assurance_amount,u.amount+=m.patient_amount,console.log(u);let p=await query("update payments set amount = ?,assurance_amount = ? where session = ?",[u.amount,u.assurance_amount,n]),O=await query("update medical_history set departments =  JSON_ARRAY_APPEND(departments, '$', ?) where id = ?",[d.department,n]);if(!p||!O)return s.status(500).send({success:!1,message:errorMessage.is_error});s.send({success:!0,message:errorMessage.operation_addedtosession_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const addSessionService=async(e,s)=>{try{let{session:n,service:a,token:r}=e.body,i=authenticateToken(r),o=await query("select assurance from medical_history where id = ?",[n]);if(!o)return s.status(500).send({success:!1,message:errorMessage.is_error});o=o[0],o=o.assurance;let d=i.token,c=0;var t=await query("select price from services where id = ?",[a.id]);if(!t)return s.status(500).send({success:!1,message:errorMessage.is_error});if(0==t.length)t={price:0};else{[t]=t,c+=t.price*a.quantity,Object.assign(a,{price:t.price*parseInt(a.quantity)});let e=await checkObjectAvai("medical_history","services","id",a.id,"id",n);if(!e)return s.status(500).send({success:!1,message:errorMessage.is_error});if(e.length)return s.send({success:!1,message:errorMessage.err_entr_avai});query('update medical_history set services =  JSON_ARRAY_APPEND(services, \'$\', JSON_OBJECT("id", ?, "quantity", ?)) where id = ?',[a.id,a.quantity,n])}if(0==c)return s.status(403).send({success:!1,message:errorMessage._err_service_404});let m=await calculatePayments(o,{services:[a]},"services"),u=await getPayment(n);if(!u)return s.status(500).send({success:!1,message:errorMessage.is_error});u=u[0],u.assurance_amount+=m.assurance_amount,u.amount+=m.patient_amount;let p=await query("update payments set amount = ?,assurance_amount = ? where session = ?",[u.amount,u.assurance_amount,n]),O=await query("update medical_history set departments =  JSON_ARRAY_APPEND(departments, '$', ?) where id = ?",[d.department,n]);if(!p||!O)return s.status(500).send({success:!1,message:errorMessage.is_error});s.send({success:!0,message:errorMessage.service_addedtosession_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const addSessionEquipment=async(e,s)=>{try{let{session:n,equipment:a,token:r}=e.body,i=authenticateToken(r),o=await query("select assurance from medical_history where id = ?",[n]);if(!o)return s.status(500).send({success:!1,message:errorMessage.is_error});o=o[0],o=o.assurance;let d=i.token,c=0;var t=await query("select price from equipments where id = ?",[a.id]);if(!t)return s.status(500).send({success:!1,message:errorMessage.is_error});if(0==t.length)t={price:0};else{[t]=t,c+=t.price*a.quantity,Object.assign(a,{price:t.price*parseInt(a.quantity)});let e=await checkObjectAvai("medical_history","equipments","id",a.id,"id",n);if(!e)return s.status(500).send({success:!1,message:errorMessage.is_error});if(e.length)return s.send({success:!1,message:errorMessage.err_entr_avai});query('update medical_history set equipments =  JSON_ARRAY_APPEND(equipments, \'$\', JSON_OBJECT("id", ?, "quantity", ?)) where id = ?',[a.id,a.quantity,n])}if(0==c)return s.status(403).send({success:!1,message:errorMessage._err_equipment_404});let m=await calculatePayments(o,{equipments:[a]},"equipments"),u=await getPayment(n);if(!u)return s.status(500).send({success:!1,message:errorMessage.is_error});u=u[0],u.assurance_amount+=m.assurance_amount,u.amount+=m.patient_amount;let p=await query("update payments set amount = ?,assurance_amount = ? where session = ?",[u.amount,u.assurance_amount,n]),O=await query("update medical_history set departments =  JSON_ARRAY_APPEND(departments, '$', ?) where id = ?",[d.department,n]);if(!p||!O)return s.status(500).send({success:!1,message:errorMessage.is_error});s.send({success:!0,message:errorMessage.equipment_addedtosession_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const addSessionMedicine=async(e,s)=>{try{let n,{session:a,medicines:r,token:i}=e.body,o=authenticateToken(i),d=await query("select assurance from medical_history where id = ?",[a]);if(!d)return s.status(500).send({success:!1,message:errorMessage.is_error});d=d[0],d=d.assurance;let c=o.token.id;let m,u=await query("select medicines from inventories where hospital = ?",[o.token.hospital]);u.length?([u]=u,u=JSON.parse(u.medicines)):u=[];for(const e of r){let i=await checkObjectAvai("medical_history","medicines","id",e.id,"id",a);if(!i)return s.status(500).send({success:!1,message:errorMessage.is_error});if(i.length)return s.send({success:!1,message:errorMessage.err_entr_avai});var t=await query("select price from medicines where id = ?",[e.id]);if(!t)return s.status(500).send({success:!1,message:errorMessage.is_error});if(0==t.length)t={price:0};else{[t]=t;for(const s of u)s.id==e.id&&(Number(s.quantity)<Number(e.quantity)?(Object.assign(e,{servedOut:!0}),Object.assign(r[r.indexOf(e)],{servedOut:!0,price:t.price*parseInt(e.quantity),status:null})):(Object.assign(e,{servedOut:!1}),Object.assign(r[r.indexOf(e)],{servedOut:!1,price:t.price*parseInt(e.quantity)}),t.price*e.quantity,"served"==e.status&&(u[u.indexOf(s)].quantity=parseInt(u[u.indexOf(s)].quantity)-parseInt(e.quantity))));"servedOut"in e||(Object.assign(e,{servedOut:!0,status:null}),Object.assign(r[r.indexOf(e)],{servedOut:!0,price:0,status:null})),e.servedOut||"served"==e.status||(n=!0),query('update medical_history set medicines =  JSON_ARRAY_APPEND(medicines, \'$\', JSON_OBJECT("id", ?, "quantity", ?, "servedOut", ?, "status",?)) where id = ? AND hc_provider = ?',[e.id,e.quantity,e.servedOut,e.status,a,c])}query("UPDATE inventories  SET medicines = ? where hospital = ?",[JSON.stringify(u),o.token.hospital]);let p=await calculatePayments(d,{medicines:r},"medicines"),O=await getPayment(a);if(!O)return s.status(500).send({success:!1,message:errorMessage.is_error});O=O[0],O.assurance_amount+=p.assurance_amount,O.amount+=p.patient_amount,m=await query("update payments set amount = ?,assurance_amount = ? where session = ?",[O.amount,O.assurance_amount,a])}if(!m)return s.status(500).send({success:!1,message:errorMessage.is_error});if(s.send({success:!0,message:errorMessage.medicine_addedtosession_message}),n){let e=await getHpEmployeesByDepartment(o.token.hospital,"1790485192");if(!e)return;let s=await getSession(a),t=await selectPatient(s[0].patient);e=e.map(function(e){return e.id});try{let s,n,r,i,o={session:a,patient:t.id,patient_name:t.Full_name};s=`incoming medications request for ${t.Full_name}`,n="medication request",r={name:"system",id:"196371492058"},i="session_message";let d={type:i,content:s,title:n,sender:r,receivers:e,extra:o};await ioSendMessages(d)}catch(e){console.log(e)}}}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const addSessionDecision=async(e,s)=>{try{let{session:t,decisions:n,token:a}=e.body,r=authenticateToken(a),i=r.token.id;for(const e of n){let n=await query("update medical_history\n         set decision =  JSON_ARRAY_APPEND(decision,'$',?) \n         where id = ? AND Status != ? AND hc_provider = ?",[e,t,"closed",i]);if(!n)return s.status(500).send({success:!1,message:errorMessage.is_error});if(0==n.affectedRows)return s.status(401).send({success:!1,message:errorMessage._err_forbidden})}s.send({success:!0,message:errorMessage.dec_added_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const approvePayment=async(e,s)=>{try{let{session:t,token:n}=e.body,a=authenticateToken(n),r=a.token.id,i=await getSession(t);if(!i)return s.status(500).send({success:!1,message:errorMessage.is_error});if(i=i[0].status,console.log(i),"open"==i)return s.status(401).send({success:!1,message:errorMessage.err_open_session});let o=await query("update payments set status = ?,type = ?, approver = ?,datepaid = CURRENT_TIMESTAMP() where session = ? ",["paid","manually approved payment",r,t]);if(!o)return s.status(500).send({success:!1,message:errorMessage.is_error});if(0==o.affectedRows)return s.status(404).send({success:!1,message:errorMessage._err_ms_404});s.send({success:!0,message:errorMessage.pAp_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const closeSession=async(e,s)=>{try{const t=DateTime.now();let n=t.setZone("Africa/Kigali");n=n.toFormat("yyyy-MM-dd HH:mm:ss");let{session:a,token:r}=e.body,i=authenticateToken(r),o=i.token.id,d=await query("update medical_history set status = ?, dateclosed = ? where id = ? AND hc_provider = ?",["closed",n,a,o]);if(!d)return s.status(500).send({success:!1,message:errorMessage.is_error});if(0==d.affectedRows)return s.status(401).send({success:!1,message:errorMessage._err_forbidden});s.send({success:!0,message:errorMessage._session_clo_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const addSessionComment=async(e,s)=>{try{let{session:t,token:n,comment:a}=e.body,r=authenticateToken(n),i=r.token.id,o=await query("update medical_history set comment = ? where id = ?",[a,t,i]);if(!o)return s.status(500).send({success:!1,message:errorMessage.is_error});if(0==o.affectedRows)return s.status(401).send({success:!1,message:errorMessage._err_forbidden});s.send({success:!0,message:errorMessage.comment_addedtosession_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const markMedicineAsServed=async(e,s)=>{let{medicines:t,session:n}=e.body;try{let e=await query("SELECT medicines FROM medical_history where id = ?",[n]);e=JSON.parse(e[0].medicines),e=e.map(function(e){for(const s of t)s!=e.id||e.servedOut||(e.status="served");return e});let a=await query("UPDATE medical_history SET medicines = ? where id = ?",[JSON.stringify(e),n]);if(!a||!e)return s.status(500).send({success:!1,message:errorMessage.is_error});s.send({success:!0,message:errorMessage.medic_updated_message})}catch(e){return console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const testPay=async(e,s)=>{let t=await calculatePayments(794092683,{medicines:[{id:1594898649,price:12},{id:1594898649,price:12}],tests:[{id:2332,price:200}],operations:[{id:121212,price:2e3}]},"type");s.send(t)};export const assuranceMH=async(e,s)=>{try{let{token:t,hospital:n}=e.body;t=authenticateToken(t),t=t.token
;let a=t.assurance,r=await query("SELECT\n    mh.id AS session_id,\n    mh.status as status,\n    mh.dateadded as dateadded,\n    mh.dateclosed as dateclosed,\n\n    GROUP_CONCAT(\n      DISTINCT \n      JSON_OBJECT('id', p.id, 'name', p.Full_name ,'insurance', COALESCE(p.assurances,'[]'))\n    ) AS p_info,\n    GROUP_CONCAT(\n      DISTINCT\n        JSON_OBJECT('id', mh.hospital,'phone', hospitals.phone, 'name', hospitals.name, 'location', \n          CONCAT(\n            (SELECT name From provinces Where id = hospitals.province),' , ',\n            (SELECT name From districts Where id = hospitals.district),' , ',\n            (SELECT name From sectors Where id = hospitals.sector),' , ',\n            (SELECT name From cells Where id = hospitals.cell)\n          )\n      )\n    ) AS hp_info,\n    GROUP_CONCAT(\n      DISTINCT\n        JSON_OBJECT('id', pm.id, 'status', pm.status, 'a_amount', pm.assurance_amount, 'p_amount', pm.amount, 'datepaid', pm.datepaid, 'date', pm.date)\n      ) AS payment_info\n\nFROM\n    medical_history mh\n    INNER JOIN patients p ON mh.patient = p.id\n    INNER JOIN users ON mh.Hc_provider = users.id\n    LEFT JOIN users as tester ON JSON_CONTAINS(mh.tests, JSON_OBJECT('tester', tester.id), '$')\n    LEFT JOIN users as operator ON JSON_CONTAINS(mh.operations, JSON_OBJECT('operator', operator.id), '$')\n    INNER JOIN hospitals ON mh.hospital = hospitals.id\n    INNER JOIN payments as pm ON mh.id = pm.session\n    LEFT JOIN medicines AS m ON JSON_CONTAINS(mh.medicines, JSON_OBJECT('id', m.id), '$')\n    LEFT JOIN equipments as eq ON JSON_CONTAINS(mh.equipments, JSON_OBJECT('id', eq.id), '$')\n    LEFT JOIN services as s ON JSON_CONTAINS(mh.services, JSON_OBJECT('id', s.id), '$')\n    LEFT JOIN operations as o ON JSON_CONTAINS(mh.operations, JSON_OBJECT('id', o.id), '$')\n    LEFT JOIN tests AS t ON JSON_CONTAINS(mh.tests, JSON_OBJECT('id', t.id), '$')\n    LEFT JOIN departments as d ON JSON_CONTAINS(mh.departments, JSON_QUOTE(d.id), '$')\n    left join assurances as a on mh.assurance = a.id\nWHERE mh.assurance = ? and mh.hospital = ? and mh.status != ?\nGROUP BY mh.id;\n\n  ",[a,n,"open"]);if(!r)return s.status(500).send({success:!1,message:errorMessage.is_error});if(0==r.length)return s.status(404).send({success:!1,message:[]});for(const e of r)r[r.indexOf(e)].hp_info=JSON.parse(e.hp_info),r[r.indexOf(e)].p_info=JSON.parse(e.p_info),r[r.indexOf(e)].p_info.insurance=JSON.parse(e.p_info.insurance),r[r.indexOf(e)].payment_info=JSON.parse(e.payment_info),r[r.indexOf(e)].dateclosed=new Date(e.dateclosed).toISOString().split("T")[0],r[r.indexOf(e)].dateadded=new Date(e.dateadded).toISOString().split("T")[0],r[r.indexOf(e)].p_info.insurance=e.p_info.insurance.find(function(e){return e.id==a});s.send({success:!0,message:r})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const getHpsessions=async(e,s)=>{try{let{token:t,assurance:n}=e.body,a=authenticateToken(t),r=a.token.hospital;r||(r=e.body.hospital);let i=await query("SELECT\n      mh.id AS session_id,\n      mh.status as status,\n      mh.dateadded as dateadded,\n      mh.dateclosed as dateclosed,\n      GROUP_CONCAT(\n        DISTINCT \n        JSON_OBJECT('id', p.id, 'name', p.Full_name ,'insurance', COALESCE(p.assurances,'[]'))\n      ) AS p_info,\n      GROUP_CONCAT(\n        DISTINCT\n          JSON_OBJECT('id', a.id, 'name', a.name\n        )\n      ) AS in_info,\n      GROUP_CONCAT(\n        DISTINCT\n          JSON_OBJECT('id', pm.id, 'status', pm.assu_paym_status, 'a_amount', pm.assurance_amount, 'p_amount', pm.amount)\n        ) AS payment_info\n  \n  FROM\n      medical_history mh\n      INNER JOIN patients p ON mh.patient = p.id\n      INNER JOIN users ON mh.Hc_provider = users.id\n      LEFT JOIN users as tester ON JSON_CONTAINS(mh.tests, JSON_OBJECT('tester', tester.id), '$')\n      LEFT JOIN users as operator ON JSON_CONTAINS(mh.operations, JSON_OBJECT('operator', operator.id), '$')\n      INNER JOIN hospitals ON mh.hospital = hospitals.id\n      INNER JOIN payments as pm ON mh.id = pm.session\n      LEFT JOIN medicines AS m ON JSON_CONTAINS(mh.medicines, JSON_OBJECT('id', m.id), '$')\n      LEFT JOIN equipments as eq ON JSON_CONTAINS(mh.equipments, JSON_OBJECT('id', eq.id), '$')\n      LEFT JOIN services as s ON JSON_CONTAINS(mh.services, JSON_OBJECT('id', s.id), '$')\n      LEFT JOIN operations as o ON JSON_CONTAINS(mh.operations, JSON_OBJECT('id', o.id), '$')\n      LEFT JOIN tests AS t ON JSON_CONTAINS(mh.tests, JSON_OBJECT('id', t.id), '$')\n      LEFT JOIN departments as d ON JSON_CONTAINS(mh.departments, JSON_QUOTE(d.id), '$')\n      left join assurances as a on mh.assurance = a.id\n    WHERE mh.hospital = ? and mh.assurance = ? and mh.status != ?\n    GROUP BY\n    mh.id;\n    ",[r,n,"open"]);if(!i)return s.status(500).send({success:!1,message:errorMessage.is_error});for(const e of i)i[i.indexOf(e)].in_info=JSON.parse(e.in_info),i[i.indexOf(e)].p_info=JSON.parse(e.p_info),i[i.indexOf(e)].p_info.insurance=JSON.parse(e.p_info.insurance),i[i.indexOf(e)].payment_info=JSON.parse(e.payment_info),i[i.indexOf(e)].dateadded=new Date(e.dateadded).toISOString().split("T")[0],i[i.indexOf(e)].dateclosed=new Date(e.dateclosed).toISOString().split("T")[0],i[i.indexOf(e)].p_info.insurance=e.p_info.insurance.find(function(e){return e.id==n});s.send({success:!0,message:i})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};export const approveAssuPayment=async(e,s)=>{try{let{assurance:t,range:n}=e.body;console.log(t,n);let a=await query("\n                                        UPDATE \n                                          payments\n                                        SET\n                                          assu_paym_status = ?\n                                        WHERE\n                                          date >= ? AND date <= ?\n                                        AND\n                                          assurance = ?",["paid",n.min,n.max,t]);if(!a)return s.status(500).send({success:!1,message:errorMessage.is_error});if(0==a.affectedRows)return s.send({success:!1,message:errorMessage._err_unknown});s.send({success:!0,message:errorMessage.pAp_message})}catch(e){console.log(e),s.status(500).send({success:!1,message:errorMessage.is_error})}};