function formatDate(t,e){let o;return o="year"==e?{year:"numeric"}:"month"==e?{year:"numeric",month:"short"}:{year:"numeric",month:"short",day:"numeric"},new Date(t).toLocaleDateString(void 0,o)}function getDateIntervalDescription(t,e){const o=DateTime.fromJSDate(t),s=DateTime.fromJSDate(e),i=s.diff(o,["years","months","days"]).toObject();return i.years>0?"year":i.months>0?"month":i.days>0?"day":void 0}import query from"./query.controller";import errorMessage from"./response.message.controller";import authenticateToken from"./token.verifier.controller";import{DateTime}from"luxon";export const insightsStats=async(t,e)=>{try{const o=DateTime.now();let s,i=o.setZone("Africa/Kigali"),{entity:r,needle:n,range:c,token:a,compType:l}=t.body;if(r&&n||(a=authenticateToken(a),a=a.token,r=a.limit,n=a.location),"province"==r?s=["districts","sectors","cells","health facilities"]:"district"==r?s=["sectors","cells","health facilities"]:"sector"==r?s=["cells","health facilities"]:"cell"==r&&(s=["health facilities"]),!c.start||!c.stop){let t=`${i.year}-${i.month-1}-${i.day} 00:00:00`;c.start=t,c.stop=i.toFormat("yyyy-MM-dd HH:mm:ss")}let p=getDateIntervalDescription(new Date(c.start),new Date(c.stop));console.log(p);let h=await query(`\n            SELECT\n             mh.decision,\n             mh.id,\n             mh.symptoms,\n             mh.tests,\n             mh.medicines,\n             mh.dateclosed as date,\n             hospitals.id as hpid,\n             hospitals.name as hpname,\n             GROUP_CONCAT(DISTINCT JSON_OBJECT(\n                 'province', (SELECT name From provinces Where id = hospitals.province), \n                 'district', (SELECT name From districts Where id = hospitals.district), \n                 'sector', (SELECT name From sectors Where id = hospitals.sector),\n                 'cell', (SELECT name From cells Where id = hospitals.cell)\n                )\n              ) as hp_loc,\n              GROUP_CONCAT(DISTINCT JSON_OBJECT(\n                'province',  hospitals.province, \n                'district', hospitals.district, \n                'sector', hospitals.sector,\n                'cell', hospitals.cell\n               )\n             ) as hp_loc_ids,\n             GROUP_CONCAT(DISTINCT JSON_OBJECT('id', p.id,'name', p.Full_name)) as p_info\n            FROM medical_history as mh\n             LEFT JOIN hospitals ON mh.hospital = hospitals.id  AND hospitals.${r} = ?\n             inner join patients as p ON mh.patient = p.id\n            WHERE  mh.dateclosed >= ? AND mh.dateclosed <= ? AND mh.status != ?\n            GROUP BY mh.id order by mh.dateclosed asc\n        `,[n,c.start,c.stop,"open"]);if(!h)return e.status(500).send({success:!1,message:errorMessage.is_error});if(!h.length)return e.status(404).send({success:!1,message:errorMessage._err_recs_404});h=h.map(function(t){return t.medicines=JSON.parse(t.medicines),t.tests=JSON.parse(t.tests),t.symptoms=JSON.parse(t.symptoms),t.decision=JSON.parse(t.decision),t.p_info=JSON.parse(t.p_info),t.hp_loc=JSON.parse(t.hp_loc),t.hp_loc_ids=JSON.parse(t.hp_loc_ids),t});let m={},d={},f={},_={},u={},g={},D={};h.forEach(t=>{if(!(t.hpname in m))if(l){let e=h.filter(function(e){return e.hpid==t.hpid&&formatDate(e.date,l)==formatDate(c.start,l)}),o=h.filter(function(e){return e.hpid==t.hpid&&formatDate(e.date,l)==formatDate(c.stop,l)});Object.assign(m,{[t.hpname]:{total:{[formatDate(c.start,l)]:e.length,[formatDate(c.stop,l)]:o.length},info:{name:t.hpname,id:t.hpid,loc:Object.values(t.hp_loc).toString().replace(/,/gi,", ")}}})}else{let e=h.filter(function(e){return e.hpid==t.hpid});Object.assign(m,{[t.hpname]:{total:e.length,info:{name:t.hpname,id:t.hpid,loc:Object.values(t.hp_loc).toString().replace(/,/gi,", ")}}})}if(!(t.hp_loc.sector in f))if(l){let e=h.filter(function(e){return e.hp_loc.sector==t.hp_loc.sector&&formatDate(e.date,l)==formatDate(c.start,l)}),o=h.filter(function(e){return e.hp_loc.sector==t.hp_loc.sector&&formatDate(e.date,l)==formatDate(c.stop,l)});Object.assign(f,{[t.hp_loc.sector]:{total:{[formatDate(c.start,l)]:e.length,[formatDate(c.stop,l)]:o.length},info:{name:t.hp_loc.sector,id:t.hp_loc_ids.sector,loc:`${t.hp_loc.province}, ${t.hp_loc.district}`}}})}else{let e=h.filter(function(e){return e.hp_loc.sector==t.hp_loc.sector});Object.assign(f,{[t.hp_loc.sector]:{total:e.length,info:{name:t.hp_loc.sector,id:t.hp_loc_ids.sector,loc:`${t.hp_loc.province}, ${t.hp_loc.district}`}}})}const e=formatDate(t.date,p);if(!(e in D)){let t=h.filter(function(t){return formatDate(t.date,p)==e});Object.assign(D,{[e]:{total:t.length}})}if(!(t.hp_loc.province in d))if(l){let e=h.filter(function(e){return e.hp_loc.province==t.hp_loc.province&&formatDate(e.date,l)==formatDate(c.start,l)}),o=h.filter(function(e){return e.hp_loc.province==t.hp_loc.province&&formatDate(e.date,l)==formatDate(c.stop,l)});Object.assign(d,{[t.hp_loc.province]:{total:{[formatDate(c.start,l)]:e.length,[formatDate(c.stop,l)]:o.length},info:{name:t.hp_loc.province,id:t.hp_loc_ids.province,loc:"rwanda"}}})}else{let e=h.filter(function(e){return e.hp_loc.province==t.hp_loc.province});Object.assign(d,{[t.hp_loc.province]:{total:e.length,info:{name:t.hp_loc.province,id:t.hp_loc_ids.province,loc:"rwanda"}}})}if(!(t.hp_loc.district in _))if(l){let e=h.filter(function(e){return e.hp_loc.district==t.hp_loc.district&&formatDate(e.date,l)==formatDate(c.start,l)}),o=h.filter(function(e){return e.hp_loc.district==t.hp_loc.district&&formatDate(e.date,l)==formatDate(c.stop,l)});Object.assign(_,{[t.hp_loc.district]:{total:{[formatDate(c.start,l)]:e.length,[formatDate(c.stop,l)]:o.length},info:{name:t.hp_loc.district,id:t.hp_loc_ids.district,loc:`${t.hp_loc.province}`}}})}else{let e=h.filter(function(e){return e.hp_loc.district==t.hp_loc.district});Object.assign(_,{[t.hp_loc.district]:{total:e.length,info:{name:t.hp_loc.district,id:t.hp_loc_ids.district,loc:`${t.hp_loc.province}`}}})}if(!(t.hp_loc.cell in u))if(l){let e=h.filter(function(e){return e.hp_loc.cell==t.hp_loc.cell&&formatDate(e.date,l)==formatDate(c.start,l)}),o=h.filter(function(e){return e.hp_loc.cell==t.hp_loc.cell&&formatDate(e.date,l)==formatDate(c.stop,l)});Object.assign(u,{[t.hp_loc.cell]:{total:{[formatDate(c.start,l)]:e.length,[formatDate(c.stop,l)]:o.length},info:{name:t.hp_loc.cell,id:t.hp_loc_ids.cell,loc:`${t.hp_loc.province}, ${t.hp_loc.district}, ${t.hp_loc.sector}`}}})}else{let e=h.filter(function(e){return e.hp_loc.cell==t.hp_loc.cell});Object.assign(u,{[t.hp_loc.cell]:{total:e.length,info:{name:t.hp_loc.cell,id:t.hp_loc_ids.cell,loc:`${t.hp_loc.province}, ${t.hp_loc.district}, ${t.hp_loc.sector}`}}})}const o=t.decision,s=t.hpname,i=t.hpid;o.forEach(t=>{g[t]||(g[t]={total:0,mostAppearance:{hospital:"",id:"",count:0},hospitalCounts:[]}),g[t].total++;let e=g[t].hospitalCounts.find(function(t){return t.id==i});e?(g[t].hospitalCounts[g[t].hospitalCounts.indexOf(e)].count++,g[t].hospitalCounts[g[t].hospitalCounts.indexOf(e)].count>g[t].mostAppearance.count&&(g[t].mostAppearance.hospital=s,g[t].mostAppearance.id=i,g[t].mostAppearance.count=g[t].hospitalCounts[g[t].hospitalCounts.indexOf(e)].count)):(g[t].hospitalCounts.push({hospital:s,id:i,count:1}),g[t].mostAppearance.count||(g[t].mostAppearance.hospital=s,g[t].mostAppearance.id=i,g[t].mostAppearance.count=1))})});const O=Object.entries(g);O.sort(([,t],[,e])=>e.total-t.total);const y=Object.fromEntries(O);g=y,e.send({success:!0,message:{groupByHps:m,groupByResults:g,avaiGroupings:s,groupBySectors:f,groupByProvinces:d,groupByDistricts:_,groupByCells:u,groupByDates:D}})}catch(t){return console.log(t),e.status(500).send({success:!1,message:errorMessage.is_error})}};